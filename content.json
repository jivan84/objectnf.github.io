{"posts":[{"title":"你好，世界！","text":"图源：创客贴 经历了各种思考和尝试，包括：好的服务器太贵、好的云空间太贵；低价的 VPS 和云空间不是速度慢就是限并发限 Idle；域名太贵（But 最终还是买了）；找不到顺眼的主题；配置太麻烦；可用性达不到要求，等等。最终的最终，将这个静态小博客安放在了 Github 上。最近比较长的一段时间会陆陆续续把之前欠下的、想写的博文补上。 顺便说一下，由于时间有限等多种因素，博文可能会写的很简略。如果您有幸阅读某一篇博文但却未能完全理解的话，充分利用搜索引擎和评论区可以事半功倍。特别说明：文章在编写过程中将不开放评论功能。如您发现已编写完的文章中包含的错误，欢迎在评论区指出，谢谢。 最后： 欢迎访问！您的支持是我最大的动力。","link":"/post/001-hello-world/"},{"title":"Linux &amp; Windows 小技巧（1）","text":"图源：《三色绘恋》 游戏背景图 最近又学到了一些零零碎碎的 Linux、Windows 命令，和一些可能今后会用得着的小技巧，怕自己忘记，所以把它们写在博客里面提醒一下自己，免得到时候再花费大量时间去百度、Google 找文章。 Linux 下查看进程树？查看进程有好几种方式，top、htop 这种可视化的，还有 ps 这种纯文本输出的程序都可以做到。但是如果想要查看某一进程的父进程或者子进程PID该怎么办？可以借助另一个程序，pstree。参数很灵活，可以根据需要启用或关闭。程序截图如下： WinHex 的替代品？WinHex是很强大的一个二进制文件查看和编辑工具（尤其是做 CTF 杂项题的时候 :）。虽然说现在全网随便搜搜就有破解版（Cracked Version）可以用，但是多了解几个 WinHex 的替代品，有备无患。 EditPlus说起来很巧，这个神器还是我在学校图书馆电脑上发现的。本来以为这东西只能编辑编辑文本，做 Notepad++ 的小弟，没想到这还能打开二进制文件查看16进制数据（emmm，不能编辑），而且…还支持 Windows ARM。 打开文件之后，点击 Edit-&gt;Hex Viewer 即可查看十六进制数据。 只不过这个并不是免费软件，但是注册码很容易搜到，点击这里。 GHex上面提到的 WinHex 和 EditPlus 都仅限于 Windows 系统。Linux 和 Mac 平台下虽然可以使用 Vim + 插件或是 Visual Studio Code + 插件来实现查看（甚至是编辑）二进制数据，但是有不少使用者吐槽体验不好，设置复杂。因此多个 Linux 包管理器的软件源中包含的开源工具 GHex 便成为了首选。 安装非常简单，sudo apt-get install ghex 界面展示如下： 010Editor010Editor 也是一款收费软件，正版价格在 130 USD （每年）左右，且不提供中文语言界面。它的特点是可以载入预定义的文件格式模板（*.bt，即 Binary Template）。现如今已有不少用户向010Editor贡献了常见二进制文件的格式模板，可以方便的一键下载安装。 以PNG文件格式为例。安装PNG文件对应的文件格式模板后，加载PNG文件，可以看到： 能够直接看到该文件格式各字段对应的值。双击即可对该字段的值进行修改。 怎么关掉 Windows 的强制驱动程序签名认证？一般来说，设备的驱动程序都会内含数字签名，防止操作系统开机时加载恶意制作的，或被程序等恶意修改的驱动程序。同时，微软公司也提供了一系列的通用驱动程序和 API，方便程序员开发和使用。 但是有些时候我们需要自己开发驱动，又或是需要安装些特殊的、不经由官方发布的驱动（例如某些玩机达人针对某一 Android 手机修改的 Fastboot 驱动等）时，Windows 会自动拦截安装请求。强制将文件复制到 drivers 文件夹并注册又会引起系统蓝屏。这个时候常见的操作是在开机时按 F8，选择“高级启动”菜单中的“禁用驱动程序签名强制”，然后系统便可以正常启动并加载未签名的驱动程序。 但是每次开机都需要按 F8 选择，不太方便。如果能默认“允许加载无数字签名的驱动程序“进行启动的话就好了。于是翻阅 BCD 文件，发现了下面这个参数： 上图中红色箭头标识的参数就是开启 Windows” 测试模式“的参数。当其值为 Yes 时，Windows 启动时自动进入测试模式，允许非官方的驱动程序的加载。而“无完整性检查”模式，允许无签名的驱动程序加载。 测试模式启用时，桌面上会出现这样的水印： 启用两种模式的命令很简单，管理员身份运行 cmd，输入如下命令即可： 12bcdedit /set testsigning onbcdedit /set nointegritychecks on 当然，关闭的话，以此类推： 12bcdedit /set testsigning offbcdedit /set nointegritychecks off 注：Windows ”测试模式“与 Windows ”安全模式“类似，是 Windows 自身为了某些特定目的而设计的内置模式，和 Windows 内测版、评估版的”机密模式”（就是右下角有 Microsoft Confidential 水印的内测模式）和“评估模式”（就是微软官方的180天测试版系统）并不相同。","link":"/post/006-linux-windows-tricks-01/"},{"title":"【WIP】压制技术B：从不熟悉的编码开始","text":"文章摘录和润色于本人的笔记，难免有错漏之处。若您发现了其中的一处或几处，请在评论处指正，我将不胜感激。 什么是压制？压制的对象可以是一切种类的音频、视频、图像，比如说： 蓝光光盘（BD）中的视频或音频（m2ts 等格式比较多见） DVD 光盘中的视频或音频（dat 等格式比较多见） CD 光碟中的视频或音频 通过 Web 下载的各流媒体网站的视频或音频 各种剪辑软件、合成软件、特效软件、DAW 等渲染的视频或音频 图片（或者动态图片）转换为视频，例如“一图流 MV”等 注意：要区分压制（Rip）和混流（Mix）。 压制是进行编码，或在编码间转换的过程。 混流是将特定编码的视频轨/音频轨放入容器，或在容器间转换的过程。 注意：要区分编码（Encoding）和容器（Container）。 举例说明如下： H.264 是一种视频编码，aac 是一种音频编码。 mp4 是一种视频容器，wav 是一种音频容器。 avi 既是一种视频编码也是一种视频容器。 mp3 既是一种音频编码也是一种音频容器。 压制的目标对视频、音频等的压制，不全面地、概括地来说，有以下几点主要目标： 使音频/视频的编码符合要求。例如符合视频网站点播视频的要求、直播网站直播串流的要求、流水线中剪辑代理的要求等。 使音频/视频的数据总量（可以理解为音频/视频的体积）或音频/视频在单位时间内的数据量（可以理解为音频/视频的码率）符合要求。例如符合蓝光光盘的码率要求、窄带（依照2010年新的标准为4Mbps以下）情况下视频点播的要求等。 尽可能地保留音频/视频中的有效信息。可以理解为视频画面中物体的轮廓、音频的频段细节等。 去除或降低音频/视频中的干扰信息。可以理解为视频画面中的噪点、音频中的杂音等。 题外话：什么是“观感”？ “观感”与“听感”一样，是一种主观的质量评价标准，可以简单地认为是有效信息占比与干扰信息占比（信噪比）的一种综合量度。目前已有诸如 VMAF 等工具辅助人眼进行视频质量的主观评价，在此不再展开。 对于动漫而言，由于画面的特殊性（明确的线条、规律的颜色和色块、较低的运动帧数等），通过压制可以保持甚至有效提升动漫的观感。","link":"/post/005-ripping-training-basics-1/"},{"title":"Linux &amp; Windows 小技巧（2）","text":"图源：《ソード・アート・オンライン（刀剑神域）》第一季第二集 CM 博客一直在慢速更新…之前一直忙于各种事情，学校的课、比赛、不断接触和学习新的东西，因此没什么机会静下心来好好整理、记录我学到的东西，也就没有办法一并记下我对某些问题的理解和思考。 之前一度认为，“有写博客文章的时间，还不如好好学点新的东西”。但是自从领悟到我和舍友之间记忆力和知识熟练程度的差距之后，终于肯下定决心好好写自己的博客了——我比不上他们，我真的不是那种过目不忘的人，所以只能通过不断的复习和总结才能勉强记住些东西。 有人说，初学者是“什么都不会，同时自己不知道自己会什么”，稍有学识的普通人是“自己会些东西，但是自己觉得自己会的很多”，而大神则是“自己会很多东西，但是自己觉得自己学的不多而且不知道自己已经会了什么”。 可能我还是初学者吧。 git push 反复输密码很烦？有的时候可能会遇到一种极端情况：假设你要编写脚本，比如：自动化运维脚本。其中涉及到一些对 git 仓库的操作，而且需要密码，比如：在自动脚本中让部署机器拉取私有仓库，或是让部署机器将构建后的代码使用某个 github 账号推送到某个 git 仓库。这个时候需要用户手动输入用户名和密码，但是我们往往不能手动输入——比如公用的 docker build machine，根本不允许用户在构建过程中进行交互。 那么我们该如何将用户名和密码“固化”在 clone 的本地仓库里，免去输入用户名密码的麻烦呢？一般有两种做法：首先是手动注册一个 OAuth App，并分配权限。部署机通过此 App 对相关 Repo 进行操作。但是这样做较为复杂，而且也可能存在 Token 过期的问题。 第二种则较为简便了，只要将 clone 时的链接： 1https://github.com/&lt;repo owner name&gt;/&lt;repo name&gt;.git 替换成如下的形式： 1https://&lt;your user name&gt;:&lt;your password&gt;@github.com/&lt;repo owner name&gt;/&lt;repo name&gt;.git 即可以实现全程无需输入密码对该本地分支对应的远程分支进行操作。譬如，你要拉取 ObjectNF/hello-word 这个仓库，用户名是 guest，密码是 123456，则链接看起来就是这个样子： 1https://guest:123456@github.com/ObjectNF/hello-world.git 这种方法是不安全的，因此已被GitHub废弃，但仍能在某些其他基于Git的代码托管服务提供商（比如Gitee，或者自建的Gitea）上使用。 以下介绍更为安全的替代方法——SSH Key。 登录GitHub，找到Settings -&gt; SSH and GPG keys: 随后进行密钥的生成。启动Git Bash： 1ssh-keygen 程序会自动生成密钥并将公钥和私钥保存至~/.ssh。 随后在GitHub中添加公钥。通过cat ~/.ssh/id_rsa.pub查看公钥，点击New SSH Key，然后将命令输出粘贴到输入框里即可。 Linux 下查看文件的占用情况lsof 是 List open files 的简称，作用是查看系统中进程占用的文件列表。比如，你想查看自己编写的程序使用了哪些文件，或者想要删除某个文件但却提示“文件被占用”的时候，就可以利用该程序进行查询。 安装： 1sudo apt-get install lsof 结合 grep 来查找文件的占用情况： 当然，受到 Linux 哲学（“一切皆文件”）的影响，lsof 工具也可以用来查看端口占用、TCP 连接等。 查看 Linux ELF 文件详情？前一阵子入手了一个路由器，想着在寝室放一个无线AP。然而比较不巧的是，寝室宽带并非那种可以直接拨号的 PPPoE，而是通过闪讯客户端进行软件拨号，好像还有时间匹配和心跳响应什么的。不过多亏了万能的 GitHub，可以下载到其他大神编写的用于 OpenWRT PPPoE 的 pptd 闪讯插件。 于是满心欢喜地给路由器插好线，通上电，开 SSH，照着 Repo 里面写的步骤执行。但是拨号阶段却怎么也没成功，不断提示“配置错误”。在检查完脚本、设备号、防火墙、用户名密码、配置文件和插件可执行权限都没问题的情况下，我开始怀疑起插件本身的问题来。 于是查看系统日志。果然提示“Exec format error.”，即可执行文件的格式错误。那么问题来了，我怎样才能知道该 ELF 格式的各种信息呢？这就需要 readelf 这个工具。 这样就能清楚地看到 ELF 格式的区别，简单方便。","link":"/post/008-linux-windows-tricks-02/"},{"title":"Linux &amp; Windows 小技巧（3）","text":"图源：Miv4t - 《MACHiNERY》，Pid：77186528 Windows 下的 cat 和 grepls、cat、grep这三个命令，往往是Linux初学者最先了解的、日常使用Linux时不可或缺的。对于Windows系统而言，同样有三个命令可以完成上述工作：dir、type与findstr。 例如，用type显示文件内容： 或者用findstr结合管道匹配先前程序输出内容中的字符串： 也可以结合正则表达式： 如果你不满足于系统命令的显示效果，你也可以尝试下面两款开源于Github的工具： peco项目链接：https://github.com/peco/peco peco可以实现对管道输入的文本进行快速搜索、排序、多行选择等功能，使用Golang编写。目前仍不支持中文编码（GBK），且不支持默认的Windows PowerShell终端（你需要使用传统的命令提示符，或者更先进的终端程序，比如Hyper或者Windows Terminal）。该项目仍在活跃开发中，合理的使用可以提升效率。 bat项目链接：https://github.com/sharkdp/bat bat是一款替代cat/type的工具，使用Golang编写。加入了代码高亮、Git增删标识、不可打印字符显示等功能。 使用参数-A可以显示所有不可打印字符： 软链接、硬链接使用命令行在Linux下，软链接（即符号链接）和硬链接的使用是非常普遍的。我们经常需要使用ln命令来创建它们。 创建硬链接的命令是： 1ln [Target] [Link name] 创建软链接，只需要再加上参数-s即可。既然是“链接”，那么说明对链接指向的文件进行修改实际上就是对源文件本身进行修改。 硬链接与源文件必须处于同一文件系统内，且源文件必须真实存在。且硬链接的源文件必须是单一文件，不能是目录，因为这样会造成硬链接包含地狱（Hard Link Inclusion Hell）。软链接的源文件则可以是文件，也可以是目录，且无需实际存在。源文件不存在的软链接成为死链接。软链接具有自己的权限与文件属性。软链接可以跨文件系统链接。删除硬链接和软链接均不会对源文件产生影响。 Windows下使用率最高的NTFS文件系统中也有类似的概念，且Windows中也提供了对应的创建链接的命令。 创建软链接的命令是： 1mklink [Link] [Target] 这个命令Windows PowerShell中是没有的，因此依然需要使用传统的命令提示符。同时注意，Link和Target的顺序与*nix下的ln是相反的（这也导致我总是记错）。如果创建硬链接，加参数/H即可。 同时要注意，对于目录的软链接与符号链接有稍许不同。目录符号连接与Linux下的目录软链接基本等同，具有独立的文件属性，在移动时仍保持相对或绝对路径的链接关系，在复制时创建源文件的副本（同Linux下使用cp直接复制软链接。Linux下的cp -d可以将软链接复制为软链接，而不是将软链接复制为文件）。而Win下的目录软链接在移动时，会在目标位置创建同名文件夹，并把源目录内的所有文件移动至新的目录。 创建目录符号链接的命令： 1mklink /D [Link] [Target Dir] 创建目录软链接的命令： 1mklink /J [Link] [Target Dir] 使用 LinkShellExtension当然，如果不习惯使用命令行操作，也可以使用第三方工具创建各种类型的软链接和硬链接。 到官网（ https://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html ）下载Link Shell Extension并安装（注：需要Visual C++ 2015 Redistributable运行库，可以到这里（ https://aka.ms/vs/15/release/vc_redist.x64.exe ）安装。 随后选择需要创建链接的文件/文件夹，右键，单击“选择源连接点”。 再到目标文件夹右键，从右键菜单中选择需要创建的链接类型就可以了。 rm 删除除指定文件外的其他文件Linux下，删除一个文件/文件夹，或删除该文件夹下所有文件等操作都很简单。但如果想保留文件夹下某一个或某几个文件，同时删除其他文件，该如何操作？ 可以结合ls、grep和xargs： 1ls | grep -vE &lt;FileName&gt; | xargs rm -rf 这是最传统的方式。你也可以使用一种bash功能，无需借助xargs即可完成这一目的。 1234# 开启需要的shell optionshopt -s extglob# 然后运行！rm -rf !(&lt;FileName&gt;) shopt是bash的内置命令，控制bash的多种可选功能的开启和关闭。bash版本不同，其可选功能也可能不同。 最常用的命令就是： 123456# 显示所有支持的可选功能及其状态shopt# 开启某个功能shopt -s &lt;function&gt;# 关闭某个功能shopt -u &lt;function&gt; 至于每个功能的具体作用，可参见The Shopt Builtin (Bash Reference Manual)或Bash shopt builtin command help and examples。 以下给出几个较为实用的例子： autocd启用时，bash中直接输入文件夹名的效果等同于执行“cd 文件夹名”。 hostcomplete启用时，在bash中输入“@”后，按Tab键可补全已知的主机名。 cdspell启用时，在bash中使用cd命令，目录名称内字符的错位、字符的缺失（限1个字符）和字符的误加可被自动修正。 restricted_shell进入bash的限制模式。限制模式下无法使用cd命令切换目录、无法修改PATH等变量等。具体的限制可参阅The Restricted Shell (Bash Reference Manual)。 这种模式不推荐使用shopt进入。推荐的进入方式是直接运行： 1rbash Windows 展台模式Windows 10 与 Windows 11 的“展台模式”旨在解决公用电脑存在的痛点。举几个场景的例子： 运营一个城市/学校的图书馆。图书馆需要一些公用电脑，供入馆人员查阅图书位置、查询借还情况、显示图书馆的近期公告等。 运营Windows系统电脑体验店/专柜。需要在展台上放置屏幕，循环播放设备和品牌的介绍视频/交互式APP等。 设置中央大屏。例如工地的考勤状态大屏、信息中心的告警状态大屏、学校的风采展示大屏等等。 这些情况下，Windows展台模式可以很好的兼顾安全性和维护的便捷性。 Windows展台模式具有以下特性： 专有用户，可以设置为开机自动登录。 无Explorer环境，自动运行且只能运行设定好的“展台程序”。 会话超时机制，一段时间无动作即会恢复初始状态。 严格的权限管理，结合展台应用的应用内限制和读写过滤器，可有效禁止文件修改、第三方程序执行、系统信息获取等可能造成安全风险的行为。 但也要注意，展台应用只能是UWP应用或Microsoft Edge浏览器。 下面简单描述Windows展台模式的设置方式。系统版本：Windows 10 Enterprise LTSC 2021, Build 19044.1415。 注意：最好使用全新安装的、只带有基本驱动程序（例如：安装Intel核心显卡驱动但不安装Intel核心显卡控制面板）和非系统级应用（例如：不安装杀毒软件、虚拟化软件等）的Windows系统。 （编外：如何给LTSC安装Microsoft Store？）到Releases · kkkgo/LTSC-Add-MicrosoftStore下载所需的文件，解压。 右键以管理员权限运行其中的Add-Store.cmd。如果之前已经安装过更新版本的Microsoft.VCLibs包，则可能会出现错误提示，忽略即可。 随后即可在开始菜单中看到Microsoft Store： 打开Microsoft Store获取更新，即可更新至新版Microsoft Store。 设置本地用户系统设置App -&gt; 账户 -&gt; 家庭和其他用户 -&gt; “将其他人添加到这台电脑” “我没有这个人的登录信息” -&gt; “添加一个没有Microsoft账户的用户” -&gt; 输入用户名，可以不设置密码。用户名此处以“Kiosk”为例。 -&gt; “下一步” 登录本地用户添加完本地用户后，需要登录一次以进行用户文件的初始化。 此时确认展台应用（UWP应用或者Microsoft Edge）是否出现在了开始菜单中。若应用有初始化过程，则至少启动应用一次。 之后打开系统设置App -&gt; 账户 -&gt; 登录选项，取消勾选“更新或重启后，使用我的登录信息自动完成设备设置”。 设置完毕后，注销这个本地用户，回到之前的管理员用户继续设置。 设置展台应用系统设置App -&gt; 账户 -&gt; 家庭和其他用户 -&gt; 分配的访问权限 -&gt; “开始”。 随后点击“选择现有账户” -&gt; Kiosk -&gt; “下一页”。 选择展台应用。此处以“Microsoft Edge”为例。 针对不同的App会显示不同的设置选项。此处以针对浏览器的选项“作为公共浏览器”为例。 设置Microsoft Edge的默认主页和会话超时时间。会话超时后会强制重启Microsoft Edge，同时删除一切浏览数据。 至此，展台模式已设置完毕。在系统设置App中可查看和修改详情。建议取消勾选“当设备崩溃时，不显示错误，并自动重启”选项，避免循环重启。 重新启动Windows，登录时选择Kiosk用户即可进入展台模式。 补充 可以使用netplwiz等将展台模式用户设置为自动登录。 默认状态下，展台模式的Microsoft Edge右键菜单是受限的。网页内是无法使用右键菜单的，但标签栏可以。Ctrl+C/V的复制快捷键也是不可用的。但部分网页可以触发折叠菜单，此时可以正常复制。 默认状态下，展台模式的Microsoft Edge功能是受限的，收藏夹、浏览器设置、开发者工具等都是无法访问的。 默认状态下，展台模式的Microsoft Edge的下载功能和打印功能是可用的，但文件只允许保存至展台用户的Downloads文件夹下。 默认状态下，展台模式的Microsoft Edge的file://协议未被禁止。通过它可以获得完整的文件目录，及读取低权限用户可以读取的部分文件，但无法下载及做出任何修改。 点击右上角的“结束会话”，可立即重启Microsoft Edge并删除浏览数据。Downloads文件夹下的文件也会一并删除。 默认状态下，展台模式的Microsoft Edge只有一个窗口。 更新展台应用时，必须先注销展台用户。注销方法：Ctrl + Alt + Delete唤起用户切换界面 - 登录管理员用户 - 启动任务管理器 - 用户选项卡 - 注销 （编外：启用写入筛选）写入筛选功能类似数十年前比较流行的“还原卡”的功能：截获驱动器 (应用安装、设置更改、保存的数据) 的写入操作并重定向到虚拟覆盖区。虚拟覆盖区在重新启动等时刻清除，达到“不可对驱动器的文件进行修改”的目的。如果对展台模式的安全性仍有疑虑，可以一并启用写入筛选器提升安全性。 启用功能写入筛选器功能仅在Windows Enterprise系列系统（企业版、IoT企业版、企业版LTSC等）中提供。 控制面板 - 程序 - 启用或关闭Windows功能 - 勾选“设备锁定 - 统一写入筛选器”。 运行和设置统一写入筛选器是CLI程序，命令为： 1uwfmgr 常用命令举例1： 123456789101112131415# 显示当前系统配置uwfmgr get-config# 启用写入筛选，重新启动后生效uwfmgr filter enable# 设置用于虚拟覆盖区的RAM大小，单位为MBuwfmgr overlay set-size 1024# 小内存机器可以利用磁盘空闲空间作为虚拟覆盖区uwfmgr overlay set-passthrough on# 设置启用保护的分区uwfmgr volume protect C:# 设置排除的目录，全盘保护则不设置# 同时建议禁用回收站uwfmgr file add-exclusion C:\\Users# 服务模式，允许安装系统更新，可选项uwfmgr servicing update-Windows 设置完成后重新启动系统即可看到效果。 关闭统一写入筛选器，使用如下命令即可： 12uwfmgr filter disableuwfmgr volume unprotect C: 1.参阅官方文档Unified Write Filter (UWF) feature (unified-write-filter) | Microsoft Docs↩","link":"/post/007-linux-windows-tricks-03/"},{"title":"拜年祭启发的小小探索","text":"图源：Bilibili 2019 拜年祭 视频截图 2019年2月4日，一年一度的哔哩哔哩拜年祭如约而至。不得不说，今年的拜年祭在节目质量和形式上相较于前三年都有较大的提升。出于在电视上离线播放（即非网络电视，而是读取存储设备上的媒体文件）的需求，及家中的缓慢网速达不到 Bilibili 大会员 1080P+ 无卡顿播放的程度，我利用少量的空余时间对 Bilibili 高清视频的下载方式进行了简单实践，并在本文中进行简单总结。 ID熟悉B站的用户应该都会了解到，B 站上的视频、音频、专栏文章、用户都是以唯一的 ID 进行标识的。以“【星尘原创】尘降【PV付/COP】”这个视频为例：其视频地址为：https://www.bilibili.com/video/av4402328，该视频所对应的音频的地址为：https://www.bilibili.com/audio/au18065，上传该视频的UP主的个人主页地址为：https://space.bilibili.com/396194。由此我们可以获取到以下类型的唯一 ID： 视频 ID [Anime (Video) ID, aid/avid]：4402328 音频 ID [Audio ID, auid]：18065 用户 ID [User ID, uid]：396194 中包含的“av”、“au”、“cv”等均是为了区分 ID 的类型所用。在 Ajax 请求过程中各 ID 的值均为数字，不包含字符。 在上述例子中没有包括的、实际应用的 ID 类型还有（不完全）[1]： 文章 ID [Content Viewing ID, cvid] 内容 ID [Content ID, cid] 通知 ID [Notification ID, nfid] 会员 ID [Member ID, mid] 标签 ID [Tag ID, tid] 顺序 ID [Order ID, oid] 分类 ID [Type ID, typeid] 直播间 ID [Room ID, roomid] 剧集 ID [Episode ID, epid] 在下载视频的时候，起到主要作用的是 aid 和 cid 这两个唯一 ID。aid 和 cid 的区别是：aid 既可以指单个视频，也可以指含有多个视频的播放列表，而 cid 是视频级唯一的。 活动专题页面找 aidBilibili 为拜年祭活动设计了专门的活动页面。链接为： 1https://www.bilibili.com/blackboard/bnj2019.html 播放拜年祭视频的小电视播放器作为 HTML5 组件放置在活动页面内。使用开发者工具查看视频统计数据的 HTTP 请求，可以发现该播放器播放视频对应的 aid。比如默认情况下播放页面均会展示视频的总播放量、回复数、投币数等。如下图： 不难发现，获取这些统计信息所请求的链接地址（以拜年祭为例）是： 1https://api.bilibili.com/x/web-interface/archive/stat?aid=36570401 返回的 JSON 数据（格式化后）如下： 12345678910111213141516171819{ &quot;code&quot;: 0, &quot;message&quot;: &quot;0&quot;, &quot;ttl&quot;: 1, &quot;data&quot;: { &quot;aid&quot;: 36570401, &quot;view&quot;: 34739455, &quot;danmaku&quot;: 1328696, &quot;reply&quot;: 195310, &quot;favorite&quot;: 1299858, &quot;coin&quot;: 1859584, &quot;share&quot;: 300501, &quot;like&quot;: 1465982, &quot;now_rank&quot;: 0, &quot;his_rank&quot;: 0, &quot;no_reprint&quot;: 0, &quot;copyright&quot;: 1 }} 上面链接和 JSON 数据中“aid”均为视频对应的视频 ID。注：该链接实际上也是获取视频统计数据的 API 接口。在此处不对此链接进行进一步说明。 由此我们得到了拜年祭视频的正常播放地址应为： 1http://www.bilibili.com/video/av36570401/ 下载1080P及以下清晰度视频的办法最为简便的方法是，我们可以利用已有的视频下载网站进行下载。这里我们举两个例子。 唧唧下载站，分段法唧唧视频下载站也是一种下载视频的办法。它通过视频的热度高低来判断视频是否应预先解析和缓存在云端。较热门的视频可以直接从唧唧网站的服务器获取。较冷门的视频则可以通过客户端下载。客户端会尝试直接解析视频直连、修改 Referer 等进行分段下载然后合并。同时，该网站同时也拥有 MP3 转换服务，将视频中的音轨提取、转码后供用户下载。 ParseVideo，直链法ParseVideo 则不提供客户端和云端缓存。这个网站的作用是直接解析出对应视频、对应清晰度的完整视频的直链，获得的直链可以用下载工具直接下载。例如：2019 拜年祭中，第一部分“珠”的 1080P 清晰度完整视频直链如下： 1http://upos-hz-mirrorwcsu.acgvideo.com/upgcxcode/94/37/74633794/74633794-1-208.mp4?ua=tvproj&amp;deadline=1550125016&amp;gen=playurl&amp;nbs=1&amp;oi=2501663261&amp;os=wcsu&amp;trid=c01282c601bb4b0cb444a9b53342fc2e&amp;uipk=5&amp;upsig=556e65a3992c1531227fb43bcb6705a3 视频地址从哪来？视频地址（参数的作用其实绝大部分都是鉴权和防盗链）可以从 Bilibili 的视频播放页获得。在加载视频前，HTML5 播放器会首先加载一个包含当前清晰度的视频链接的文件，名为 playurl。获取播放地址的完整链接为（登录状态下的 1080P+ 链接，Session MD5 部分隐去）： 1https://api.bilibili.com/x/player/playurl?avid=36570401&amp;cid=74633794&amp;qn=112&amp;type=&amp;otype=json&amp;fnver=0&amp;fnval=16&amp;session=4710f|sec| 得到的 JSON 数据（格式化并去除转义字符后）类似这样（部分参数含有隐私信息，因此隐去，隐去部分用 |sec| 标识）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576{ &quot;code&quot;: 0, &quot;message&quot;: &quot;0&quot;, &quot;ttl&quot;: 1, &quot;data&quot;: { &quot;from&quot;: &quot;local&quot;, &quot;result&quot;: &quot;suee&quot;, &quot;message&quot;: &quot;&quot;, &quot;quality&quot;: 112, &quot;format&quot;: &quot;hdflv2&quot;, &quot;timelength&quot;: 2961402, &quot;accept_format&quot;: &quot;hdflv2,flv,flv720,flv480,flv360&quot;, &quot;accept_description&quot;: [&quot;高清 1080P+&quot;, &quot;高清 1080P&quot;, &quot;高清 720P&quot;, &quot;清晰 480P&quot;, &quot;流畅 360P&quot;], &quot;accept_quality&quot;: [112, 80, 64, 32, 16], &quot;video_codecid&quot;: 7, &quot;seek_param&quot;: &quot;start&quot;, &quot;seek_type&quot;: &quot;offset&quot;, &quot;dash&quot;: { &quot;duration&quot;: 2961, &quot;minBufferTime&quot;: 1.5, &quot;video&quot;: [{ &quot;id&quot;: 112, &quot;baseUrl&quot;: &quot;http://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/94/37/74633794/74633794-1-30112.m4s?e=ig8eux|sec|&amp;deadline=1550136700&amp;gen=playurl&amp;nbs=1&amp;oi=1885698042&amp;os=ks3u&amp;platform=pc&amp;trid=126ef7|sec|&amp;uipk=5&amp;upsig=c71526|sec|&quot;, &quot;backupUrl&quot;: null, &quot;bandwidth&quot;: 5826637, &quot;mimeType&quot;: &quot;video/mp4&quot;, &quot;codecs&quot;: &quot;avc1.640028&quot;, &quot;width&quot;: 1920, &quot;height&quot;: 1080, &quot;frameRate&quot;: &quot;16000/672&quot;, &quot;sar&quot;: &quot;1:1&quot;, &quot;startWithSap&quot;: 1, &quot;SegmentBase&quot;: { &quot;Initialization&quot;: &quot;0-992&quot;, &quot;indexRange&quot;: &quot;993-8128&quot; }, &quot;codecid&quot;: 7 }], &quot;audio&quot;: [{ &quot;id&quot;: 30280, &quot;baseUrl&quot;: &quot;http://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/94/37/74633794/74633794_nb1-1-30280.m4s?e=ig8eux|sec|&amp;deadline=1550136700&amp;gen=playurl&amp;nbs=1&amp;oi=1885698042&amp;os=ks3u&amp;platform=pc&amp;trid=126ef7|sec|&amp;uipk=5&amp;upsig=5f58ae|sec|&quot;, &quot;backupUrl&quot;: null, &quot;bandwidth&quot;: 321706, &quot;mimeType&quot;: &quot;audio/mp4&quot;, &quot;codecs&quot;: &quot;mp4a.40.2&quot;, &quot;width&quot;: 0, &quot;height&quot;: 0, &quot;frameRate&quot;: &quot;&quot;, &quot;sar&quot;: &quot;&quot;, &quot;startWithSap&quot;: 0, &quot;SegmentBase&quot;: { &quot;Initialization&quot;: &quot;0-907&quot;, &quot;indexRange&quot;: &quot;908-8055&quot; }, &quot;codecid&quot;: 0 }, { &quot;id&quot;: 30216, &quot;baseUrl&quot;: &quot;http://upos-hz-mirrorcos.acgvideo.com/upgcxcode/94/37/74633794/74633794-1-30216.m4s?um_deadline=1550136700&amp;platform=pc&amp;rate=0&amp;oi=1885698042&amp;um_sign=df1a58|sec|&amp;gen=playurl&amp;os=cos&amp;trid=126ef7|sec|&quot;, &quot;backupUrl&quot;: null, &quot;bandwidth&quot;: 67238, &quot;mimeType&quot;: &quot;audio/mp4&quot;, &quot;codecs&quot;: &quot;mp4a.40.2&quot;, &quot;width&quot;: 0, &quot;height&quot;: 0, &quot;frameRate&quot;: &quot;&quot;, &quot;sar&quot;: &quot;&quot;, &quot;startWithSap&quot;: 0, &quot;SegmentBase&quot;: { &quot;Initialization&quot;: &quot;0-907&quot;, &quot;indexRange&quot;: &quot;908-8055&quot; }, &quot;codecid&quot;: 0 }] } }} playurl 获取时各个参数的含义： avid，即视频 ID。cid，即该视频所对应的内容 ID。 qn，视频质量代码。对应的是 JSON 格式中“accept_quality”这个 list 中的值。 otype：数据的呈现形式。可以是 JSON 或 XML。 type：用途不明。可能跟平台类型有关。 fnver：用途不明。 fnval：控制视频的格式。fnval 为 0 时是 FLV 格式，为 1 时是 MP4 格式，为 16时是 DASH 序列。 因此获取视频ID为 36570401（对应的内容ID为 74633794）的 1080P FLV 格式的播放地址（注意：不是直链，也不能直接播放，仅为小电视播放器能够解析的地址）并展示为 XML 格式的链接： 1https://api.bilibili.com/x/player/playurl?avid=36570401&amp;cid=74633794&amp;qn=80&amp;otype=xml&amp;fnval=0 以上结束了针对 playurl 的讨论。至于如何构造参数使得 playurl 包含的视频链接可供下载和播放，因为没有更深层的探究，所以此处不继续讨论。但是视频直链中包含“ua=tvproj”字样，又结合 Bilibili 具有 DLNA 投屏功能，可进行初步猜想：“直链”的参数构造应仿照了 App DLNA 投屏时，App 发送给 DLNA 终端的视频链接所附带的参数。 利用 Android App 下载高清视频Bilibili App 内部本身拥有缓存功能，虽然并非对所有视频开放（比如：受到版权保护只能够在线观看的番剧），但是已开放缓存的视频可以利用“缓存”本身实现下载。 Bilibili 安卓客户端默认的视频缓存位置为： 1/storage/emulated/0/Android/data/tv.danmaku.bili/download 该文件夹下包含着 App 缓存的所有视频文件。视频文件的存放位置为 [该视频的视频ID]/[该视频的分P数]/lua.[视频格式].bili2api.[视频质量]/0.blv。例如，2019 拜年祭“珠”部分 1080P+ 缓存完成后的视频文件完整路径为： 1/storage/emulated/0/Android/data/tv.danmaku.bili/download/36570401/1/lua.hdflv2.bili2api.112/0.blv 已缓存完成视频的扩展名为 blv（Bilibili Video），未缓存完成的视频的扩展名为 bdl（Bilibili Download）。将已经缓存完毕的 blv 文件复制到其他位置，并改扩展名为 flv（根据“视频格式”进行判断）即可正常播放。 获取弹幕数据网页前端获取弹幕数据的链接为： 1https://api.bilibili.com/x/v1/dm/list.so?oid=74633794 此处 oid 的值即为对应视频 cid 的值。当然你也可以从 App 的缓存中提取弹幕数据。接上例，视频缓存对应的弹幕数据缓存文件完整路径为： 1/storage/emulated/0/Android/data/tv.danmaku.bili/download/36570401/1/danmaku.xml 另外，缓存文件夹内包含的其他文件作用列举如下： entry.json 保存缓存视频的基本信息和统计数据。 index.json 保存缓存视频的下载地址。 0.blv.4m.sum 保存缓存视频的字节大小。 由于互联网上已有多篇对xml弹幕数据进行综合处理的文章，所以在此处不再进一步讨论弹幕数据的处理相关内容。 加密直播间的密码校验 API这里直接给出 Bilibili用于校验直播间密码的接口： 1https://api.live.bilibili.com/room/v1/Room/verify_room_pwd?room_id=roomid&amp;pwd=pwd 其中，room_id 参数为直播间的房间 ID，pwd 参数为直播间的密码。 参考链接[1] fython.&amp;emsp;BilibiliAPIDocs [DB/OL]&amp;emsp;获取于2019.2.14","link":"/post/009-bilibili-playlink-findings/"},{"title":"认识Snort3 （1）：编译、安装与简单使用","text":"图源：SAyuki - 《Gray》，Pid：79912976 Snort 简介Snort，是一款开源的 IDS/IPS 软件，由思科公司（Cisco）主导开发，使用广泛。Snort 有三种模式——包嗅探模式（Packet Sniffer）、包记录模式（Packet Logging）、IPS模式（Intrusion Prevention System）。搭配自定义的规则、不同的插件与其他软件，Snort 能在不同的系统中发挥不同的作用。 本篇文章简单记录 Snort3 的编译、安装和简单使用流程。 编译安装 Snort3例子中使用的操作系统是 Ubuntu Server 20.04.3 LTS。当然你也可以使用 Ubuntu 18.04.5 LTS，或者其他 Linux 发行版。某些发行版由于内核配置原因无法编译 libdaq 的部分插件（例如 NFQ），这时 Snort 虽然无法提供防护功能，但仍然可以作为入侵检测系统（IDS）来使用。 快速导入 Ubuntu Server 虚拟机Ubuntu Server 虚拟机其实不必下载 ISO 镜像后再用 VMWare 等虚拟化软件从头进行安装。Ubuntu 官方已经提供了预安装的虚拟磁盘的下载（如 Kali Linux 官方所做的那样），即 Ubuntu Cloud Images。 以 20.04 LTS daily build 为例，找到对应的 OVA 文件： 以VMWare Workstation为例，双击下载的OVA文件，唤起VMWare Workstation的导入向导；或先打开VMWare Workstation主程序，左上角“文件”菜单中点击“打开”，然后选择OVA文件。 随后进行OVA导入时的初始化设置。 首先填入虚拟机名称和存储位置。 随后设置系统详情。 由上至下依次解释不同字段的含义： “该实例的唯一ID”：云服务管理器中可见的ID（第一个输入框，默认值为id-ovf，在VMWare Workstation中导入时保持默认值）和主机名。 “获取种子数据的URL”：从特定位置获取用户设置数据进行无应答安装，脱离管理器使用时可以忽略。 “SSH公钥”：如果需要通过公钥登录SSH，则将公钥复制粘贴进该输入框。 “编码的用户数据”：Base64编码的用户设置数据，用于无应答安装，不使用的情况下留空。 “默认用户的密码”：是系统中默认的普通权限用户ubuntu的首次登陆密码，即系统的首次登陆密码。可以设置为一个临时密码，登陆后强制要求修改。 关于user-data和meta-data的更多信息，可参阅cloud-init文档。 虚拟机导入后的设置修改虚拟机设置在虚拟机设置中，按需修改CPU、内存的分配值，同时可以移除（我猜应该没人需要）软盘驱动器选项。扩展磁盘容量（例如我在这里扩展到了30.0GB）。同时将网络适配器的设置进行修改，例如改为NAT模式。 注意：按下面文档的操作，编译时虚拟机至少需要2GB运行内存。 如何登陆开机，待登陆界面出现后，使用ubuntu作为登陆用户名、在向导中设置的用户密码作为登陆密码登陆系统。 随向导更改密码： 即可成功登陆。 禁用云服务组件关闭并禁止cloud-config服务启动。 1234sudo service cloud-config stopsudo systemctl disable cloud-config.servicesudo service cloud-init stopsudo systemctl disable cloud-init.service 可以卸载相关软件包： 1sudo apt-get remove -y cloud-init 同时rsync、snapd等程序也可以按照需要进行卸载。 DNS解析修改DNS解析可以结合以下命令： 12ip addr #获取网卡接口名称sudo resolvectl dns &lt;网卡名称&gt; &lt;DNS服务器IP&gt; 修改APT源编辑/etc/apt/sources.list，更换apt源至国内源。教程很多，此处不做详细说明。 修改控制台的分辨率处于控制台模式下时，发现默认分辨率为700x400px。这时除了设置OpenSSH Server通过远程连接虚拟机外，还可以通过修改Grub配置来改变控制台分辨率。 以修改为1600x1200px为例，在/etc/default/grub中加入以下两行： 12GRUB_GFXMODE=1600x1200GRUB_GTXPAYLOAD_LINUX=1600x1200 保存后运行： 1sudo update-grub 重启即可看到效果。1 使SSH服务允许使用密码登陆默认已安装和启用SSH服务。若需要ubuntu用户通过密码连接至虚拟机，编辑/etc/ssh/sshd_config，查找如下行： 1PasswordAuthentication no 改为yes，并重新启动SSH服务即可。 分区扩容使用parted进行分区扩容。 1234567sudo parted /dev/sdapresizepart 1yes-1pq 随后使用resize2fs进行文件系统扩容。 1sudo resize2fs /dev/sda1 至此已成功扩容。 安装基本开发环境1sudo apt-get install -y build-essential cmake autoconf 其他安装过程中需要的依赖，在详细步骤中进行说明。 安装新版 libpcap安装依赖： 1sudo apt-get install -y flex bison 下载源代码，可以选择下载tar包解压： 1234# 可能已有更新版本，可以去官网查看最新版本下载地址# https://www.tcpdump.org/wget https://www.tcpdump.org/release/libpcap-1.10.1.tar.gztar -xzf libpcap-1.9.1.tar.gz 或者官方Github Mirror： 12# 可能已有更新版本，可以去Github查看最新版本Taggit clone https://github.com/the-tcpdump-group/libpcap.git --branch libpcap-1.10.1 --depth 1 libpcap-1.10.1 随后进行配置和安装，以/usr/lib作为安装目录： 1234cd libpcap-1.10.1/./configure --prefix=/usrmake -j2sudo make install FAQ：我直接安装官方源中的libpcap-dev不行吗？ 可以尝试，但可能遇到libpcap版本过低、Snort3无法使用的情况。因此还是建议官网编译安装最新版本的libpcap。 安装 netmap（可选步骤）下载源代码： 12# 可能已有更新版本，可以去Github查看最新版本Taggit clone https://github.com/luigirizzo/netmap.git --branch v13.0 --depth 1 编译安装2： 1234cd netmap/./configure --prefix=/usrmake -j2sudo make install 安装 libdaq安装依赖： 1sudo apt-get install -y pkg-config libtool libmnl-dev nftables 下载源代码： 12# 可能已有更新版本，可以去Github查看最新版本Taggit clone https://github.com/snort3/libdaq.git --branch v3.0.5 --depth 1 编译安装： 12345cd libdaq/./bootstrap./configure --prefix=/usrmake -j2sudo make install 注意： 若需要在“检测”的同时启用“过滤”功能，必须保证NFQ DAQ module处于开启状态。 Divert module是BSD独有的模块。 netmap module需要手动安装，且是可选项。 安装 libdnet下载源代码： 12# 长时间没有发布新的版本，直接使用主分支git clone --depth 1 https://github.com/ofalk/libdnet.git 编译安装： 1234cd libdnet/./configure --prefix=/usrmake -j2sudo make install FAQ：我直接安装官方源中的libdnet-dev不行吗？ 是不行的。libdnet-dev包不是Snort3需要的libdnet库，而是Debian系列系统下的DECnet库。Snort3需要的libdnet库在Ubuntu的官方源中是libdumbnet-dev包。 FAQ：那我安装libdumbnet-dev包不行吗？ 理论上可以，但非常麻烦，因为需要修改Snort3的编译命令，将-ldnet全部修改为-ldumbnet。 安装Snort安装依赖： 1sudo apt-get install -y libhwloc-dev luajit libluajit-5.1-dev libssl-dev libpcre3-dev zlib1g-dev liblzma-dev libunwind-dev uuid-dev libhyperscan-dev libflatbuffers-dev libsafec-dev libjemalloc-dev 下载源代码： 12345678# 可能已有更新版本，可以去Github查看最新版本Taggit clone https://github.com/snort3/snort3.git --branch 3.1.19.0 --depth 1# 创建安装目录sudo mkdir /opt/snort./configure_cmake.sh --prefix=/opt/snort --enable-jemalloccd build/make -j2sudo make install 随后可以运行： 1/opt/snort/bin/snort -V 查看Snort3的版本。 这就结束了整个编译和安装过程。 简单使用Snort使用简单的明文Telnet测试Snort3是否可以正常使用。 虚拟网络环境设置共有三台虚拟机同时运行： Telnet服务器，只有一块NAT网卡（VMNet8），IP地址：192.168.232.130 Telnet客户端，只有一块Host-Only网卡（VMNet2），IP地址：192.168.153.128 Snort3机器，有NAT网卡（VMNet8）和Host-Only网卡（VMNet2）。IP地址分别为：192.168.232.134，192.168.153.129 对Snort3机器的网络进行设置： 首先，使用 1ip addr 查看第二块网卡的设备名和MAC地址。 编辑netplan配置文件： 1sudo nano /etc/netplan/50-cloud-init.yaml 仿照第一个网卡的设置，设置第二个网卡的静态IP4。 123456ens32: addresses: - 192.168.153.129/24 match: macaddress: 00:0c:29:ff:b8:87 set-name: ens32 随后重启，或者直接应用netplan设置： 1sudo netplan apply 再开启网卡： 1sudo ip link set ens32 up 即可看到两个网卡的IP地址。 Telnet服务器设置系统版本：Ubuntu 20.04.3 LTS Desktop amd64 安装Telnet服务器： 1sudo apt-get install -y xinetd telnetd 创建Telnet Server配置文件： 1sudo nano /etc/xinetd.d/telnet 配置文件中按需修改和保存以下内容3： 12345678910111213# default: on# description: The telnet server serves telnet sessions; it uses# unencrypted username/password pairs for authentication.service telnet{ disable = no flags = REUSE socket_type = stream wait = no user = root server = /usr/sbin/in.telnetd log_on_failure += USERID} 重启xinetd服务： 1sudo service xinetd restart 即可接受客户端的Telnet连接。 Telnet客户端设置系统版本：Windows 10 LTSC 2021 amd64，Build 19044.1415 安装Telnet客户端： 控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启用和关闭Windows功能，勾选“Telnet客户端” -&gt; 确定。 随后打开Windows PowerShell，用以下命令即可启动Telnet连接： 1telnet &lt;IP地址&gt; &lt;端口号&gt; 设置网关Windows上打开网络与共享中心，修改以太网的网关为192.168.153.129，并填写公网DNS服务器： 此时Windows可访问Snort3机器，不可访问Telnet Server机器。 在Snort3机器上打开IPv4包转发功能： 12sudo suecho 1 &gt; /proc/sys/net/ipv4/ip_forward 同时修改/etc/sysctl.conf，使IPv4包转发持续开启。 修改iptables规则，设置转发和混杂模式： 1234sudo iptables -A FORWARD -i ens32 -o ens192 -j ACCEPTsudo iptables -t nat -A POSTROUTING -o ens192 -j MASQUERADE# 保存配置sudo iptables-save &gt; iptables.conf 此时，Telnet客户端机器已可以连接Telnet服务器。 Snort的记录模式示例命令： 1sudo /opt/snort/bin/snort -i ens32 -L dump -d 包输出举例： 包统计举例： 也可以作为抓包工具使用。示例命令： 12sudo mkdir /opt/snort/pcap # 用于存放生成的pcap文件的文件夹sudo /opt/snort/bin/snort -i ens32 -L pcap -l /opt/snort/pcap -d -e 简单上手Snort的检测模式检测/过滤模式需要结合Snort的“配置文件”和“规则文件”进行使用。 1234mkdir snort_rules # 存放配置文件和规则文件cd snort_rules/touch config.lua # Snort的配置文件touch telnet.rule # 针对Telnet的报警规则 参照/opt/snort/etc内的内容，编写config.lua： 123456789101112131415161718192021222324-- 导入通用流式协议解析规则、IP协议解析规则和TCP流解析规则-- 可通过 --help-module $mod 查看详情stream = {}stream_ip = {}stream_tcp = {}-- 设置检测规则ips = { -- 包含外部文件内的规则 include = 'telnet.rule', -- 传递变量 variables = { nets = { -- “外部网络”IP EXTERNAL_NET = 'any', -- &quot;需要被保护的“IP HOME_NET = '192.168.232.130' } }} 以及编写规则5。以“检测用户通过Telnet输入了sudo”为例： 12345678# 声明协议类型、IP地址、数据流向等alert tcp $EXTERNAL_NET any -&gt; $HOME_NET 23 ( # 自定义提示消息 msg: &quot;\\&quot;sudo\\&quot; appeared in telnet.&quot;; flow: to_server, established; # 不区分大小写 content: &quot;sudo&quot;, nocase;) 启动Snort3。示例命令： 1sudo /opt/snort/bin/snort -c config.lua -i ens32 -A fast -d 进行测试，成功产生警告： 1.参阅tty - How do I increase console-mode resolution? - Ask Ubuntu，可能遇到方法失效的情况。↩2.参阅luigirizzo/netmap: Automatically exported from code.google.com/p/netmap，可能需要完整内核源码，且只对特定型号的网卡有效。↩3.参阅17.4.2. The /etc/xinetd.d/ Directory Red Hat Enterprise Linux 4 | Red Hat Customer Portal。↩4.参阅Netplan | Backend-agnostic network configuration in YAML。↩5.snort3-community-rules是不错的参考资料。↩","link":"/post/010-snort-1-intro/"},{"title":"Rime（1）：介绍与安装","text":"图源：@爱卿 《夏》 82079855 什么是 Rime？RIME，官方中文名称为“中州韻”（即“中州韵”，中原之韵），是一款开源的轻量的跨平台输入法库，由佛振等人开发。源代码现托管在 Github 上：rime/librime。Rime 具有很强的扩展性和可定制性——你可以使用 Lua 编写它的插件，也可以通过自定义配置文件实现自己研发的、更加高效的汉字输入方案，或者实现多语言混合输入，又或者你只是想在各个平台上获得统一的文字输入体验。这一特性使得强大的 Rime 在使用上拥有无限的可能性。本文是 Rime 系列的第一篇，主要记录 Rime 在各个平台下的安装，及其基础的使用方法。 如何安装 Rime？Librime 是一个开源的输入法库。库像是一种”后端“，不能直接用于文字输入。需要和配套的“前端”（一说“发行版”）一起使用。“前端”也已有不少实现，列举使用人数较多的输入法“前端”如下： rime/squirrel，中文名为“鼠须管”，macOS 下的输入法前端； rime/weasel，中文名为“小狼毫”，Windows 下的输入法前端； osfans/trime，中文名为“同文输入法”，Android 下的输入法前端； jimmy54/iRime，中文名为“iRime输入法”，iOS 下的输入法前端，注意有应用内购付费，而且有人反映其并未严格按照Rime前端统一的规范加载配置文件； rime/ibus-rime，Linux 下的输入法前端，基于 IBus； fcitx-rime，Linux 下的输入法前端，基于 Fcitx 或者你也可以利用librime，编写自己的输入法前端。 Windows - WeaselWeasel可以直接在Rime的官网下载安装，也可以手动编译安装。截止本文写作之时，Rime官方发布的稳定版本为0.14.3，采用librime 1.5.3版本，更新于2019年6月22日。而librime的最新版本已迭代至了1.7.2，修复了不少错误并且向后兼容。因此强烈推荐手动编译新版本并安装。 编译所需环境： Visual Studio 2017 Boost 1.69.0 CMake NSIS Git、7z、Wget for Windows等常见工具 下面简单叙述步骤。 第一步：Clone项目，下载并更新子模块为最新。 123git clone --recursive https://github.com/rime/weasel.gitcd weasel\\git submodule update --remote --recursive 第二步：修正NSIS配置文件错误。找到output\\install.nsi，修改第159行的： 1File &quot;data\\opencc\\*.ocd&quot; 为： 1File &quot;data\\opencc\\*.ocd2&quot; 这是因为新版本的opencc使用ocd2作为字典格式，而不是老版本的ocd格式。 第三步：设置环境变量。包括编译器版本、工具集、Boost位置、librime编译成品的版本号（可从librime的Release页查询）、下载链接等。根据实际情况和版本需要进行修改。 如果你不想通过命令行下载librime，也可使用浏览器下载后，参照第四步所述命令手动将所需文件放置于指定位置。 1234567set BOOST_ROOT=C:\\Libraries\\boost_1_69_0set CMAKE_GENERATOR=&quot;Visual Studio 15 2017&quot;set PLATFORM_TOOLSET=v141_xpset rime_version=1.7.3set rime_variant=rime-with-pluginsset download_archive=%rime_variant%-%rime_version%-win32.zipset WEASEL_BUILD=20210309 推荐下载支持Lua插件扩展的rime-with-plugin版本。 第四步：下载编译好的librime并复制文件。 1234567wget https://github.com/rime/librime/releases/download/%rime_version%/%download_archive%7z x %download_archive% * -y -olibrimecopy /Y librime\\dist\\include\\rime_*.h include\\copy /Y librime\\dist\\lib\\rime.lib lib\\copy /Y librime\\dist\\lib\\rime.dll output\\if not exist output\\data\\opencc mkdir output\\data\\opencccopy /Y librime\\thirdparty\\share\\opencc\\*.* output\\data\\opencc\\ 第五步：编译Boost环境。直接使用为AppVeyor编写的编译脚本即可。 1.\\appveyor_build_boost.bat 第六步：编译主程序。 1.\\build.bat data hant weasel installer 随后在output文件夹中即可找到编译完成的安装文件。双击进行安装即可。 安装时会弹出设置选项： 用户资料夹即为下文提到的“用户资料路径”，如果你想直接开始使用，选择默认方案为“中文（简体）”就可以了。 安装完成后，需要留意以下三个路径： 默认数据路径：默认为C:\\Program Files (x86)\\Rime\\weasel-$版本号 用户数据路径：默认为C:\\Users\\$用户名\\AppData\\Roaming\\Rime 同步路径：默认为C:\\Users\\$用户名\\AppData\\Roaming\\Rime\\sync\\$安装ID 这两个路径对后续Rime的配置有很大用处。 Linux - Ibus-rimeLinux下的前端有两个，一个是基于Fcitx的fcitx-rime，既支持Fcitx 4，也支持新开发的Fcitx 5。但缺点是无法同步输入法的用户数据。另一个是基于的Ibus的ibus-rime，可以同步输入法的用户数据。以下以Ubuntu环境为例，配置ibus和ibus-rime。 安装十分简单，ibus已包含于官方源中： 1sudo apt install ibus ibus-rime 安装完毕后重启系统，打开设置-区域与语言-输入源-加号（+），在弹出的窗口中选择汉语（中国）-中文（Rime），点击添加。 随后在任务栏右上角切换输入法即可激活ibus-rime。 当然你也有可能遇到ibus在某些应用程序中不可用的问题，一般只要在~/.bashrc中加入如下的设置环境变量命令即可。 123export GTK_IM_MODULE=ibusexport XMODIFIERS=@im=ibusexport QT_IM_MODULE=ibus 注意：有些发行版的ibus-rime在安装时会附带依赖librime-data，其中包含了rime默认的输入方案，如朙月拼音、仓颉、五笔等，可“开箱即用”。但由于不是所有发行版都有这种依赖，后文的基本配置环节将建立在无默认输入方案的基础之上。 对于ibus-rime来说，三个重要路径如下： 默认数据路径：/usr/share/rime-data 用户数据路径：~/.config/ibus/rime 同步路径：~/.config/ibus/rime/sync/$安装ID Android - Trime至对应的GitHub Repo或Google Play上搜索“同文輸入法”下载安装即可。随后在Android的设置-语言与输入法-输入法管理中启用输入法即可。 同文输入法同样也附带了rime的默认输入方案，如果你对输入方案和词库没有要求的话，同样可以“开箱即用”。 对于Trime来说，三个重要路径如下： 默认数据路径：/sdcard/rime 用户数据路径：默认情况下与系统数据一致 同步路径：/sdcard/rime/sync/$安装ID Rime默认配置文件的简单介绍默认数据这里以小狼毫为例，简单来看一下rime默认附带的配置文件都有什么。默认数据的存放位置是安装目录下的data文件夹。 从上到下依次进行介绍： opencc：开放中文转换（OpenCC）库需要的文件。一般也称OpenCC“滤镜”。存放着滤镜的配置文件（json）和滤镜本体（ocd或ocd2） preview：皮肤的预览图，应为小狼毫特有的文件夹。 *.sechma.yaml：输入方案的配置文件，yaml格式。对输入法的行为进行了定义。图中涵盖了这些默认方案： bopomofo：注音输入法。 bopomofo_express：注音输入法的快打模式。快打模式会对输入法行为进行调整，如自动上屏（即自动将唯一匹配的候选词进行输出）、特殊键位（如大写锁定键作为候选词的切换键）等。 bopomofo_tw：为台湾正体优化的注音输入法。实际上就是默认启用了注音输入法中加载的台湾字形滤镜。 cangjie5：第五代仓颉输入法。 cangjie5_express：仓颉输入法的快打模式。 luna_pinyin：朙月拼音。这会是我们后续进行定制的基础输入方案。 luna_pinyin_fluency：朙月拼音语句流模式。空格作为分词，一次可打多个词。 luna_pinyin_simp：朙月拼音的中文简体模式。 luna_pinyin_tw：朙月拼音的台湾正体模式。 luna_quanpin：全拼输入法。一般作为调试用途。 stroke：五笔输入法。 terra_pinyin：地球拼音输入法。 *.dict.yaml：对应输入方案的输入法词库。“候选词”中的大部分来源于此。 default.yaml：主配置文件，涵盖包括输入法方案的禁用和启用、候选词个数、键位绑定等配置。 essay.txt：“八股文”，预设词汇表和语言模型。 weasel.yaml：输入法前端配置文件，包含了与前端相关的配置，如界面字体、界面颜色等。不同的前端配置文件名称不同（也可能没有该配置文件），如同文输入法的前端配置文件为trime.yaml。 pinyin.yaml：拼音输入法的模糊音配置。 punctuation.yaml：定义了基本的全角符号和半角符号。 symbol.yaml：定义了几乎所有常见的符号，除标点外还包括序号、上下标、希腊字母、片假名等。 key_bindings.yaml：额外的快捷键定义。 zhuyin.yaml：将拼音码表与注音码表相互转换。这样输入注音时就可从拼音词库中查词。是输入方案bopomofo的依赖项——不难发现bopomofo并没有自己的词库，而是与terra_pinyin共用词库。 默认用户数据同样以小狼毫为例，简单看一下默认的用户数据都包括些什么。用户数据存储于安装时指定的用户资料夹位置下。如果你还没有开始使用小狼毫打字，目录下的文件是这样的： 如果你已经用小狼毫打过字，并触发过用户资料同步，那么目录下的文件看起来像这样： 依次进行介绍： installation.yaml：保存了“前端”与“后端”的安装信息，如“前端”名称、librime版本号、安装ID等。 user.yaml：存放用户变量，如最后一次同步时间的时间戳等。 sync：是默认的用户数据同步文件夹。 *.userdb：是对应的输入方案的词频/排序/个人词典数据库。 build：存放词库与输入方案编译后的yaml文件和二进制文件。 *.schema.yaml、*.dict.yaml等：输入法的输入方案及其对应的词库。相同名称的输入方案/词库配置会替代默认数据目录下的输入方案/词库配置，也即用户数据的优先级高于默认数据。 如果你触发过同步，可以在默认的同步文件夹下看到同步后的文件。 依次进行介绍： user.yaml、installation.yaml、*.schema.yaml、*.dict.yaml等：与用户数据文件夹下的内容一致。仅在默认数据目录中而不在用户数据目录中的文件不会被同步。 *.userdb.txt：输入方案的数据库的导出文件，按特定格式明文保存。这也是后续构建个人词库的词条来源。 对目录结构和文件作用有了基本了解之后，我们就可以着手定制自己的输入方案了。","link":"/post/011-rime-1-intro/"},{"title":"压制技术 A：光盘的种类、资源发布标注与常见名词解释","text":"图源：《终将成为你》BD-1 声优特典 背景图 常见光盘种类CDCompact Disc，又叫做“小型镭射盘”、“激光唱片”，通过激光来读写数据。单层容量大概 700MB。其中一般存储的是音乐，但也有存储视频、相片、软件（多数是游戏）的 CD。常见分类如下： 按存储内容分类： CD-DA: 音乐 CD CD-I: 交互式 CD（游戏CD） VCD: 视频 CD CD+G: 带有专辑图片和歌词的音乐 CD Photo CD: 图片 CD 按读写情况分类： CD-ROM: 只读光盘。光盘背面的凹槽为厂家印制。 CD-R: 一次性写入光盘。 光盘背面的凹槽为刻录机烧制。 CD-RW: 可读写光盘。 DVDDigital Video Disc，（高密度）数字视频光盘。也称作“数字多功能光盘”。单层容量大概 4.7GB。使用红色激光（650nm）来读写数据。其中一般存放的是视频。也有用于存放音乐和数据的 DVD。常见分类如下： 按读写情况分类： DVD-R: 一次性写入 DVD。 DVD-RW: 可重复读写 DVD。 DVD+R: DVD-R 的变种。 DVD+RW: DVD-RW 的变种。 按数据类型分类： DVD-Video: 视频 DVD DVD-Audio: 音频 DVD DVD-Multi: 多功能 DVD BDBlue-ray Disc，蓝光光盘。单层容量大概 27GB。使用蓝紫色激光（405nm）来读写数据。其中一般存储的是视频。也有用于存放数据的 BD。常见分类如下： 按容量大小分类： BD-DL: 50GB 空间的 BD BD-XL TL: 三层 BD，存储空间 100GB BD-XL QL: 四层 BD，存储空间 128GB 按读写情况分类： BD-R: 一次性写入 BD BD-RE: 可重复读写 BD 资源发布标注这里列举一些各资源小组发布资源时常用的标识，并附带简单的解释。 例一1[悠哈璃羽字幕社&amp;LoliHouse] 五等分的新娘 / Go-toubun no Hanayome - 09 [WebRip 1080p HEVC-10bit AAC][简繁内封字幕] [悠哈璃羽字幕社&amp;LoliHouse]: 字幕社与压制组的名称。如果是原盘发布，一般是购买人/自行购买小组/合并团购小组的名称。五等分的新娘: 番剧的中文名称。Go-toubun no Hanayome: 番剧的罗马音。09: 番剧的集数。Web: 压制素材的来源标识。 Web: 从在线播放网站（GYAO!/Netflix/Amazon等）提取链接下载得到高清视频进行压制。 BD: 从蓝光光碟提取的原 m2ts 视频进行压制。 DVD: 从 DVD 光碟提取的 DAT 视频进行压制。 TV：从 IPTV 流中截取的 ts 视频进行压制。 Rip: 指“将碟片中的数据转至硬盘上”这一过程，即压制。1080: 分辨率大小。p: 场扫描方式，这里是 progressive，即“逐行扫描”。HEVC: 指所用到的编码规范。AVC 与 H.264 等同，HEVC 与 H.265 等同。10bit: 指颜色位深。常见的位深有 8 位、10 位、12 位等。AAC: 指视频中音轨的音频编码。内封字幕: 指视频容器中带有字幕。相对之下的是“外挂字幕”，指字幕文件与视频文件分离的字幕类型。 例二1[Re：从零开始的异世界生活 Memory Snow][Re: Zero kara Hajimeru Isekai Seikatsu Memory Snow][Re:ゼロから始める異世界生活 Memory Snow][BDMV][1080p][OVA][JP][TQYSY] 与上面例一的区别部分列举如下： Re:ゼロから始める異世界生活 Memory Snow：番剧的日语名称。 BDMV：指文件类型为蓝光光碟视频文件。 OVA：标识剧集类型。 JP：购买国家（光碟是XX国家版）。部分番剧会分美版和日版等。 当然，标题的类型不止这些，这里只举出最常见的两种类型。其他文件类型（图片集、漫画杂志扫描件、轻小说扫描件、Live 现场、音乐专辑等）标题各有规范，这里就不举例了。 常见名词释义Season：季度 Episode：集 Romaji：罗马音 Disc X：光盘分盘销售编号 SP：特典 OVA：光盘发售动画 RAW：原生视频（不做画面修改和字幕添加） Track：轨道（视频轨或音频轨） p/i：场扫描方式（逐行扫描/隔行扫描） fps：帧速率（25，30，24000/1001，30000/1001 较常见） 5.1：声道数（1，2，5.1，7.1 较常见） YUV420：色彩空间（RGB-Rec.709，RGB-Rec.601，RGB-Rec.2020，YUV420，YUV422，YUV444，GRAY 较常见） 副音轨：指光盘附带的，和画面同步进行的声优/导演/编剧评论和访谈音轨 NCOP/NCED：没有制作人员名单、字幕等遮挡的 OP 和 ED 部分 码率：单位时间内画面包含的数据位数 Chapter：章节，某些 BD 中包含视频章节点，和迅速跳过 OP、ED，标识剧情转折等 Scan：扫描，特指扫描光盘喷绘、光盘盒包装、附带设定集等 BDBOX：盒装 BD，有时也指最终发售的、一次性包含所有分销光盘的典藏盒装 BD","link":"/post/013-ripping-training-basics-0/"},{"title":"D^3CTF 2021 - Misc - Robust WriteUp","text":"图源：@電瘋扇 《仓鼠松鼠》 91999586 “Robust”意为“鲁棒性”。 打开cap.pcapng，发现都是QUIC协议的数据包。结合提供的firefox.log（即使用firefox浏览器访问时生成的SSL Key Log）可以想到基于QUIC协议且强制使用TLS 1.3的HTTP3。 导入SSL Key Log： 清晰可见HTTP3数据包。利用过滤器过滤出所有HTTP3数据包，然后从头查看： 1http3 可以明显看出，642号包之前的部分是在载入网页和JavaScript脚本。在第642号包处可以发现一个m3u8 playlist： 注意到是加密的直播流，因此想到浏览器应该获取到了解密Key。继续向下分析数据包，在第648号数据包处找到解密Key： 复制出来，另存为enc.key。 随后就是找到切片并提取切片了。600余个数据包，肯定不能手动进行处理（除非你有耐心）。因此依旧借助pyshark进行处理。有两种办法： 通过HTTP3数据包的类型和长度，判断每个切片的起始位置，再利用数据包内原始的m3u8 playlist和key做解密，随后合并。 依据MPEG-TS容器格式特性和AES-128-CBC加密方式特性，可以先合并，再解密。 下面以方法二为例解题。 编写脚本将所有的HTTP3 frame payload提取出来，并依次序写入同一个文件中： 123456789101112131415import pysharkimport oscap = pyshark.FileCapture(&quot;cap.pcapng&quot;, override_prefs={&quot;ssl.keylog_file&quot;: os.path.abspath(&quot;firefox.log&quot;)})fd = open(&quot;output.ts&quot;, &quot;wb&quot;)for i in range(678, 18706): try: if int(cap[i].http3.frame_type) == 0: fd.write(cap[i].http3.frame_payload.binary_value) except Exception: continuefd.close() 之后，构造只含一个切片的m3u8 playlist： 12345678#EXTM3U#EXT-X-VERSION:3#EXT-X-MEDIA-SEQUENCE:0#EXT-X-PLAYLIST-TYPE:VOD#EXT-X-KEY:METHOD=AES-128,URI=&quot;enc.key&quot;,IV=0x00000000000000000000000000000000#EXTINF:10000output.ts#EXT-X-ENDLIST EXTINF可以随意给大，解密密钥的URI改为相对路径。随后使用FFMPEG进行解密即可。 1ffmpeg -allowed_extensions ALL -i index.m3u8 -c copy outdec.ts 你也可以使用openssl。这里注意，HLS切片加密时遇到过长的Key会截取前128位作为加密密钥。 1xxd -P enc.key 得到如下输出： 123343632386565613630313966323236316132623437346336336637653536663531383439653831663166353931326538363835663861303461666430323133640d0a 取前128位进行解密即可： 1openssl aes-128-cbc -d -in .\\output.ts -out .\\out.ts -iv 00000000000000000000000000000000 -K 34363238656561363031396632323631 -nosalt 随后，解密出的ts切片就可以直接播放了。利用Adobe Audition查看频谱： 很明显这里包含了信息，需要解码。将数据通过转换变为声信号的过程很容易想到拨号上网时需要用到的的“调制解调器”。于是尝试搜索解码工具： 发现quiet工具（https://github.com/quiet/quiet）具有将数据转换为高频声信号（所谓的“ultrasonic”）的功能。 随后，clone两个repo：quiet/libfec和quiet/quiet，编译即可。编译过程略。 在默认配置文件quiet-profiles.json中，有多个以ultrasonic开头的配置。这时回到Audition，仔细观察频谱频率： 频谱很明显以19KHz为中心，这与ultrasonic配置文件的配置相吻合： 因此可以确定使用了该配置文件。 随后进行解码。可以直接使用quiet的API，当然也可使用quiet的示例程序。阅读示例程序代码decode_file.c： 需要将待解码的文件转化为wav格式，且重命名为encoded.wav。联想到题目的“Robust”，意即“鲁棒性”，因此大胆直接转码。但是为了不丢失数据，保险起见，保持原采样率和最高量化位数： 随后解码： 1./quiet_decode_file ultrasonic out.txt 得到Base64，解码发现PK头，保存为Zip，打开，发现有密码： 根据文件名称，联想到网易云音乐的歌词。至于是哪首歌的歌词，联想到网易云音乐有歌曲的“Song ID”。因此首先找到歌曲： https://music.163.com/song?id=1818031620 随后提取歌词。 方法一：利用网页API。F12仔细分析即可找到歌词获取接口。例子如下： 1https://music.163.com/weapi/song/lyric?csrf_token=7ab6599ebc00854e324f6dcf04353358 将网页内容保存为lyric-1818031620.json文件即可。 方法二：利用网易云音乐客户端缓存。容易找到缓存歌词的文件夹（以Windows系统为例）：C:\\Users\\ObjectNotFound\\AppData\\Local\\Netease\\CloudMusic\\webdata\\lyric 将该文件复制出来改名为lyric-1818031620.json即可。 然后就可以进行明文攻击了。可以使用Advanced Archive Password Recovery，也可以使用pkcrack。注意Zip的压缩算法设置。 得到txt文档的内容： 换用其他软件查看，发现存在空白字符隐写： 利用工具解密即可。注意选择正确的解码设置。可以使用十六进制编辑器的查找功能确定使用的编码字符。 https://330k.github.io/misc_tools/unicode_steganography.html 得到解码结果： 1&lt;~A2@_;ApZ7(GA0]MC.i&amp;:F%'t#:JXSd=tj-$&gt;'EtK0m.1t0i38~&gt; 由定界符&lt;~ ~&gt;易知其为Base85编码。解码可得Flag： 1d3ctf{1IwiKUjKcUsEn0OOJZZ0ZsZwUX1uiC1P}","link":"/post/012-d3ctf-2021-robust-writeup/"},{"title":"【WIP】解包《三色Δ绘恋》，与 Kirikiri 初探","text":"图源：《三色Δ绘恋》内附 圣诞节特别篇 “圣夜钟音” 主题桌面壁纸 舍友买了一份《三色Δ绘恋》，其中的立绘和音乐水准相当不错。某天于是突发奇想，从舍友那里拷贝了份游戏的文件，打算把里面的立绘和音频提取出来。 于是开始操作。 确定引擎，准备工具整体的文件结构相当清晰，显然 TricolourLovestory_chs.exe 是中文版本的主程序，TricolourLovestory_chs.cf 是中文版本的启动配置文件，steam_api.dll 是连接 Steam 进行软件正版验证、存档上传等功能的插件，其他的 xp3 文件就是我们要找的资源包了。所以针对此文件格式，寻找对应的工具，进行解包。 经过 Google 和 Github 的多方搜索，找到了两个最为常用的工具，ExtractData 与 KrkrExtract。前者可以对资源包内的文件进行提取，后者可以对资源包内的文件进行提取、修改和删除。这里我们使用普适性更强的 ExtractData 进行提取操作。 无脑提取打开ExtractData，再打开待分析的xp3文件即可。 上图即是分析后的结果，在想要提取的文件上右键，“Extract Selected Range”即可提取出此文件。同时在“Quick Settings”中可以看到ExtractData对某些格式文件默认的转换设置（比如JPG转换为PNG），如果不需要自动转换可以在解压的时候选择“Extract Selection without conversion”。 xp3类型一般都是Kirikiri游戏引擎的资源包类型。某些非媒体类的内容，如脚本和文本，在Kirikiri引擎打包资源的过程中会被zlib库压缩。ExtractData也可以识别并解压。","link":"/post/015-unpack-tricolour-lovestory/"},{"title":"D^3CTF 2021 - Misc - easyQuantum WriteUp","text":"图源：@しぐれうい 《雨に恋う》 83975808 cap.pcapng用Wireshark打开，清晰可见TCP的三次握手和四次挥手： 于是需要仔细分析中间的数据传输过程。 注意到某些数据包内有“numpy”等字符串： 于是想到可能是某种兼容Python的序列化方法。 又注意到有固定的头部数据： 而pickle序列化时也有固定的头部数据（协议版本4.0）： 于是尝试利用pickle进行反序列化。示例如下： 12345678910import pysharkimport picklecap = pyshark.FileCapture('cap.pcapng')test_pack = cap[3]data = test_pack.data.data.binary_valuedeserialized = pickle.loads(data)print(deserialized) 得到结果312。随后发现之后的数据包的长度有规律：即436-(ACK)-90-(ACK)-90-(ACK)五个一组，或436-(ACK)-81-(ACK)两种组合。分别拿一组包进行反序列化测试： 12Pack:327 Data:[array([0.70710678+0.j, 0.70710678+0.j]), array([ 0.70710678-8.65956056e-17j, -0.70710678+8.65956056e-17j]), array([0.+0.j, 1.+0.j]), array([1.+0.j, 0.+0.j])]Pack:329 Data: 123Pack:331 Data:[array([0.70710678+0.j, 0.70710678+0.j]), array([1.+0.j, 0.+0.j]), array([1.+0.j, 0.+0.j]), array([ 0.70710678-8.65956056e-17j, -0.70710678+8.65956056e-17j])]Pack:333 Data:[0, 0, 1, 1]Pack:335 Data:[0, 1, 0, 1] 又发现第1041个数据包处有疑似密文的数据： 题目中的“QKD”即量子密钥分发。常见的QKD协议有BB84、B92、E91等。结合前面的关于流程的分析（通过状态向量传递量子、两个数组先后传递Bob的测量基和Alice的判断结果）可以确定使用BB84协议进行的密钥分发。这就也能解释开头处传输的“312”：Alice和Bob需要提前约定好密钥长度。（严谨的BB84密钥交换协议中包括纠错、保密放大、认证等流程，此处略去） 同时注意到密文与密钥一样是312字节，考虑可能是流密码对每一位进行加密。 而如上述序号为329的数据包处的空数据，结合量子传输过程中不可直接窃听的特性，可以想到存在窃听者Eve，测量了量子后使Bob没有收到Alice传输的量子。 通过量子的状态向量和题目中给出的量子初始状态，已经可以判断出对量子进行操作的量子门及其顺序，因此就相当于获得了Alice传输的量子。这也是题目中“Debug info”的含意。 编写程序解密即可。 增补：为降低难度，量子的初状态已经已题目描述的方式给出。参考资料的不同可能导致对状态向量的理解上产生偏差。为降低难度，此题使用量子数学的表示方式，即： $ \\left| \\phi \\right&gt; = \\alpha \\left| 0 \\right&gt; + \\beta \\left| 1 \\right&gt; $ 得到 $ [\\alpha, \\beta] $ 为方便处理，过滤掉所有不包含数据的包，并存为新的文件： 1tcp.flags == 0x018 随后编写脚本解密即可。示例脚本如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import pysharkimport binasciiimport qiskitimport picklefrom bitstring import BitArrayQUANLENG = 4key = &quot;&quot;cap = pyshark.FileCapture('cap2.pcapng')def decrypt_msg(enckey: BitArray, msg: BitArray): res = BitArray() for i in range(msg.len): tmp = enckey[i] ^ msg[i] res.append(&quot;0b&quot; + str(int(tmp))) return resdef recv_quantum(quantum_state: list): # Load state quantum = [qiskit.QuantumCircuit(1, 1) for _ in range(4)] # Recover quantum for i in range(4): real_part_a = quantum_state[i][0].real real_part_b = quantum_state[i][1].real if real_part_a == 1.0 and real_part_b == 0.0: continue elif real_part_a == 0.0 and real_part_b == 1.0: quantum[i].x(0) elif real_part_a &gt; 0.7 and real_part_b &gt; 0.7: quantum[i].h(0) else: quantum[i].x(0) quantum[i].h(0) return quantumdef measure(receiver_bases: list, quantum: list): # Change quantum bit for i in range(4): if receiver_bases[i]: quantum[i].h(0) quantum[i].measure(0, 0) else: quantum[i].measure(0, 0) quantum[i].barrier() # Execute backend = qiskit.Aer.get_backend(&quot;statevector_simulator&quot;) result = qiskit.execute(quantum, backend).result().get_counts() return resultdef get_key(qubits: list, bases: list, compare_result: list): measure_result = measure(bases, qubits) for i in range(4): if compare_result[i]: tmp_res = list(measure_result[i].keys()) global key key += str(tmp_res[0])if __name__ == &quot;__main__&quot;: key_len = pickle.loads(cap[0].data.data.binary_value) i = 1 while i &lt; 567: if int(cap[i+1].data.len) == 15: i += 2 continue quantum_state = pickle.loads(cap[i].data.data.binary_value) quantum = recv_quantum(quantum_state) bob_bases = pickle.loads(cap[i+1].data.data.binary_value) alice_judge = pickle.loads(cap[i+2].data.data.binary_value) get_key(quantum, bob_bases, alice_judge) i += 3 key = key[:key_len] msg = BitArray(pikle.loads(cap[567].data.data.binary_value)) plaintext = decrypt_msg(BitArray(&quot;0b&quot;+key), msg) print(plaintext.tobytes()) 得到Flag: 1d3ctf{y1DcuFuYwCgRfX33uT1lgSy27jYIsF4i} 当然，使用量子状态向量、Bob的测量基和测量结果的直接对应关系直接得出结果（即不需要模拟）也是可以的。这里不再赘述。","link":"/post/014-d3ctf-2021-easyquantum-writeup/"},{"title":"西湖论剑预选赛Misc第二题Write-UP","text":"图源：“西湖论剑”线上赛主页 所以说，近期铺天盖地宣传的“西湖论剑”网络安全技能赛预选已经结束了。在这里随便糊一篇文章（也是我第一次写Write-Up文章），就聊聊杂项最先放出的那个第二题的解法。 首先拿到题，解压，发现里面有“题目描述”，先看描述，是这么写的： 我们截获了一些IP数据报，发现报文头中的TTL值特别可疑，怀疑是通信方嵌入了数据到TTL，我们将这些TTL值提取了出来，你能看出什么端倪吗？ 然后看给出的另一个文件，ttl.txt，里面的内容是这样的： 不难发现TTL值只有 $63$，$127$，$191$，$255$ 四种，都是$2$的某次幂$-1$的值。于是将这四个数都转换成二进制，得到 $111111_2$、$1111111_2$、$10111111_2$、$11111111_2$ 四个二进制数。从后面两个数字可以观察到二进制数的开头两位似乎有关系。又因为TTL值为一个8位整数，进行合理猜想，不妨将不足8位的二进制数开头补0，变为8位后再取开头两位。即：$00111111_2$、$01111111_2$、$10111111_2$、$11111111_2$提取开头两位为：$00_2$、$01_2$、$10_2$、$11_2$，恰好为全排列，可以用于数据的存储。 这样每组两个比特，四组就可以组成一个字节。博客园上也有文章提到了这种数据隐藏方式（点击这里）。 随后编写脚本，将这些数据进行处理并将得到的二进制数据转为十六进制明文。Python脚本代码如下：（假设输入文件为ttl.txt，输出文件为ttl_res.txt) 123456789101112131415161718192021222324252627infile = open(&quot;ttl.txt&quot;, &quot;r&quot;)outfile = open(&quot;ttl_res.txt&quot;, &quot;w&quot;)ascii_data = &quot;&quot;num = 0for i in range(295376): tmp = infile.readline(); tmp = tmp[4:len(tmp)-1] bin_data = bin(int(tmp))[2:] bin_len = len(bin_data) if bin_len != 8: for j in range(8-bin_len): bin_data = &quot;0&quot; + bin_data bin_val = bin_data[:2] ascii_data += bin_val num += 1 if num == 4: num = 0 msg_hex = hex(int(ascii_data, 2))[2:] if len(msg_hex) &lt; 2: msg_hex = &quot;0&quot; + msg_hex outfile.write(msg_hex) ascii_data = &quot;&quot;infile.close()outfile.close() 得到的文件是这个样子的： 随后打开WinHex，新建文件，将记事本中的内容全选、复制，粘贴到WinHex中，粘贴方式选择“ASCII Hex”，得到如下结果： 另存为txt文件，怀疑其仍为16进制数据。在WinHex中再次新建文件，重复上述操作，得到： FF D8 FF E1是JPEG文件头部标志，因此保存为jpg。能从缩略图发现这是一个二维码，但是不完整。 怀疑该文件中含有多张JPEG图片。搜索JPEG文件尾标志FF D9，结果如下： 将6个JPEG文件分别提取保存为新的文件，得： 分别是同一个二维码的不同部分。利用Photoshop拼接得到完整二维码： 二维码识别，扫描结果为： 1key:AutomaticKey cipher:fftu{2028mb39927wn1f96o6e12z03j58002p} 这并非flag原文而是密文。前面的key字段有两个含义：加密方式为 AutoKey Chiper 且加密密钥为AutomaticKey。找到在线解密网站进行解密（注意：这个网站只会将字母解密，因为符号和数字在密码加密前后不变，因此网站自动忽略了对它们的处理），用解密后的字母替换解密之前的字母得到真正的flag： 1flag{2028ab39927df1d96e6a12b03e58002e}","link":"/post/016-xihuctf-misc2-writeup/"},{"title":"RCTF 2019 杂项 Disk WriteUp","text":"图源：《明日方舟》游戏背景 龙门之夜 我又来随便糊一篇文章了。 题目设定如下： An otaku used VeraCrypt to encrypt his favorites. Password: rctf Flag format: rctf{a-zA-Z0-9_} 题目给的提示十分简单。于是准备 VeraCrypt，开始解题。 找前半段Flag首先下载题目附件，得到 rctf-disk.zip，解压得到 encrypt.vmdk。因为无法确定 vmdk 是 VeraCrypt 加密完的虚拟硬盘文件随便改了个格式，还是存储了 VeraCrypt 加密后虚拟磁盘文件的虚拟磁盘（这话真的超级绕hhh），因此先尝试使用 7zip 打开该文件。 说明外层的 vmdk 只是容器，并没有加密。将 0.fat 解压出来，再次尝试用 7zip 打开，报错，说明 vmdk 中包含的这个 FAT32 分区被加密了。使用 WinHex 载入这个文件可以看到： 这样我们就得到了前半段 Flag，为：rctf{unseCure_quick_form4t_vo1ume 找后半段Flag使用题目中所给的 VeraCrypt 密码对 0.fat 文件进行解密并加载，发现加载成功，为常规卷，加密类型为 AES。 访问该磁盘，文件如下： 注意左侧文件的文件名 70056639_useless_file_for_ctf_just_ignore_it.jpg，说明其不包含解题的有效信息。于是打开 password.txt，文件内容为： 12Password 2: RCTF2019You're late... So sad 将此加密盘卸载，使用得到的第二个密码再次加载，加载成功。加密方式是 AES，但是注意该分区是隐藏分区。 由于是隐藏分区所以无法直接访问。因此使用 WinHex 载入磁盘，提示无法自动检测分区格式后选择“分区无格式”，并查看该分区扇区数据（DiskGenius 查看磁盘扇区数据也可以）。 得到后半段 Flag：_and_corrupted__1nner_v0lume} 拼接后得到完整的 Flag： 1rctf{unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume}","link":"/post/017-rctf-2019-misc-disk-writup/"},{"title":"PHP 及 PHP 插件编译","text":"图源：《明日方舟》 战场背景2 今后文章会同步更新在我的 CSDN 博客，但是还是以这个自己拿阿里云服务器搭建的网站为主的。不过CSDN有个好处是可以被国内的搜索引擎抓取到，嗯，省得我做搜索引擎优化了啊。 如果有人只想看完整写完的文章的话，也请左拐 CSDN，或者这里。主站开了七牛云加速，顺便做了 Google 、 Bing 和百度等的搜索引擎收录。最近身体欠佳。原定的学习计划和博客更新计划也不出意外的咕了。没有办法。健康是第一要务。等待过后慢慢去补吧。 编译 PHP安装必要环境包含编译器，和编译需要的库。所有的编译操作均在 Ubuntu 19.04 下进行。 12sudo apt-get updatesudo apt install -y gcc g++ cmake make libxml2-dev libbz2-dev libcurl4-gnutls-dev libzip-dev libwebp-dev libpng-dev libjpeg-dev libxpm-dev libfreetype6-dev 下载源码你可以 clone GitHub 上的代码： 1git clone https://github.com/php/php-src.git 当然也可以到 php.net 下载源码并解压： 1234wget https://www.php.net/distributions/php-7.3.7.tar.gztar -xvzf php-7.3.7.tar.gzrm php-7.3.7.tar.gzcd php-7.3.7/ 开始编译首先读取插件列表（插件列表没有修改的时候可跳过此步骤）： 1./buildconf --force 然后进行基本配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849mkdir phpbin./configure \\ --prefix=~/Document/phpbin \\ # 是非程序文件 install 的位置 --exec-prefix=~/Document/phpbin \\ # 是程序文件 install 的位置 --enable-fpm \\ --enable-cli \\ --enable-embed=shared \\ --enable-phpdbg \\ --enable-phpdbg-webhelper \\ --enable-phpdbg-debug \\ --enable-debug \\ --enable-bcmath \\ --enable-calendar \\ --enable-exif \\ --enable-ftp \\ --enable-intl \\ --enable-mbstring \\ --with-curl \\ --enable-embedded-mysqli \\ --enable-pcntl \\ --enable-shmop \\ --enable-soap \\ --enable-sockets \\ --enable-sysvmsg \\ --enable-sysvsem \\ --enable-sysvshm \\ --enable-wddx \\ --enable-zip \\ --with-zlib \\ --with-zlib-dir \\ --with-pcre-jit \\ --with-pcre-regex \\ --with-iconv \\ --enable-mysqlnd \\ --enable-pdo \\ --enable-hash \\ --enable-ctype \\ --enable-json \\ --enable-session \\ --enable-xml \\ --enable-libxml \\ --enable-simplexml \\ --enable-fileinfo \\ --with-openssl \\ --with-gd \\ --with-webp-dir \\ --with-jpeg-dir \\ --with-png-dir \\ --with-xpm-dir 随后手动修改Makefile，手动将CFLAGS_CLEAN改成如下内容： 1CFLAGS_CLEAN = -I/usr/include -g -O0 -Wall $(PROF_FLAGS) 最后，开始多线程编译： 12make all -j8make install php 程序主文件在 ~/Document/phpbin/bin/php 处。 生成插件生成插件需使用刚刚编译好的php可执行文件。当然你也可以额外在系统中安装一套php（环境）以备不时之需。 1sudo apt install -y apache2 php7 php-xdebug mysql-server mysql-client 随后到php源码文件夹、ext文件夹下，运行 1php ./ext_skel.php --ext hello_obj 如果已知插件应用的平台的话，可以加上--onlyunix或 --onlywindows 避免生成其他平台的config文件。 在config.m4文件中，注意前面的编译命令部分，如果你的插件是独立的，取消掉下面两行的注释（dnl）： 12PHP_ARG_ENABLE(hello_obj, whether to enable hello_obj support,[ --enable-hello_obj Enable hello_obj support], no) 但是如果你的插件依赖了其他插件的代码（头文件等），你需要保持上面两行的注释并取消下面两行的注释： 12PHP_ARG_WITH(hello_obj, for hello_obj support,[ --with-hello_obj Include hello_obj support]) 注意，不同段的注释要保证对齐。 编译插件最常见的两种方法：重新编译php本体和使用phpize单独编译插件。 编译php本体的办法很简单，即在./configure步骤处看情况加入--enable-hello_obj或 --with-hello_obj 参数即可。这种情况下，当没有php.ini配置文件时，插件是默认启用的，利用 1php -r &quot;phpinfo();&quot; 命令可以查看phpinfo()输出信息。 用phpize的话，请注意使用 你编译PHP时prefix指定的目录下的phpize（~/Document/phpbin/bin/phpize），保证版本一致。 cd到插件源码所在的目录，运行phpsize，会生成编译所需文件。 随后执行 1./configure --with-php-config=&lt;php-config bin&gt; 其中php-config bin 为 你编译PHP时prefix指定的目录下的php-config（~/Document/phpbin/bin/php-config）。 编译并安装。 12makemake install .so文件会自动复制到插件文件夹。在php.ini中加载插件即可。 1extension=hello_obj.so 当然，你也可以用phpize编译安装Xdebug等外置php插件。","link":"/post/018-php-7-3-compile-and-ext/"},{"title":"Hexo新姿势！","text":"图源：《三色Δ绘恋》第8幕 烟花大会 Hexo的插件真是个好东西！一开始部署博客的时候并没有太在意插件的问题，毕竟觉得博客主题自带的插件挺全面的，足够使用了。但是用久了总是会腻，就想着静态博客能不能整一些新操作，即使只是添加点小功能。于是就翻了翻 Hexo 的插件目录，挑了些比较有用的插件，拿出来做个总结，同时也是为了方便以后使用做的一个简单记录。 管理员界面插件是hexo-admin，效果是一个类似CodiMD编辑页面的“管理控制台”，可以实时编辑预览Markdown文章，修改tag，从剪贴板粘贴图片到文章等操作。注意：仅用于hexo s状态下的博客实例。 文章加密插件是hexo-blog-encrypt，使用前须在站点配置文件加入以下内容： 12encrypt: enable: true 随后在文章的开头部分加入password:字段设置密码即可。 同时，配合abstract:字段和message:字段可以设置对无密码人的提示信息。同时注意不要设置toc。 中英文自动空格插件为hexo-filter-auto-spacing，npm install --save之后就可以用，无需手动设置。 插入行内JS/CSS/图片插件为hexo-filter-inline-assets。 站点设置： 123inline_assets: enabled: true limit: 100000 随后引入： 12&lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css?__inline=true&quot;&gt;&lt;script src=&quot;myscript.js?__inline=true&quot;&gt;&lt;/script&gt; 插入 ASCIInema 终端短视频插件为hexo-filter-asciinema，作用是允许向博客文章内插入ASCIInema平台的视频。 站点设置： 12asciinema: enable: true 随后演示机安装asciinema，sudo apt install asciinema，并对asciinema进行授权，asciinema auth。浏览器打开程序给出的链接，登入账号、查收验证邮件，即可成功启用。使用asciinema rec开始录制。由于该网站被墙，因此可以在录制结束后按&lt;Ctrl+C&gt;保存至本地，并在本地引用。 实例：@asciinema 快速上标插件为hexo-filter-sup，站点设置： 12sup: markup: '^' 实例：x^2^+5=10 文本提示插件为hexo-tag-hint，实例：大家好，这个博客用了Hexo。 注意字符串中有单引号的时候加反斜线转义。 H5视频插件为hexo-tag-html5video，实例： Your browser does not support the webm tag. 第一行三个参数必须带上，不然默认video/webm。 统一ID插件为hexo-uuid，作用是给每一个页面自动生成一个UUID字段。你可以拿这个字段做些别的事情，比如将其设置为博文链接什么的。 二维码插件为hexo-tag-qrcode，实例： 下拉抽屉插件为hexo-tag-details，实例： 怎样才能订阅你博客的更新？订阅RSS啊！ SoundCloud插件为hexo-tag-soundcloud，实例： 当然，不加链接加Track ID也是可以的。 脚注插件为hexo-footnotes，实例：我真的喜欢读《三体》1 支持多行注释和Markdown注释。 PDF 文件插件为hexo-pdf，实例：（Modeling Singing F0 With Neural Network Driven Transition-Sustain Models - By Kanru Hua） MPlayer插入本地MP3文件。插件为hexo-tag-mplayer，实例： new cplayer({ element: document.getElementById('mplayer651'), playlist: [ { name: 'm_sys_title_intro', artist: 'Arknights', src: './m_sys_title_intro.mp3' }, {}, ], autoplay: false, volume: 0.75, playmode: \"listloop\", big: false, dark: false }) 已弃用文字上标插件是hexo-ruby-character，需要在Linux环境下编译npm包。 示例：{% ruby Chocolate | Vanilla %} ，也可方便的给汉字注音，例如：{% ruby 鬼魅魍魉 | 鬼魅魍魉 %}，又或者是恶搞，类似： {% ruby 精彩节目 | 前方高能 %}，同时也适用于其他语言，譬如：{% ruby 噓 | うそ %} だの？ 由于其依赖包nodejieba兼容性问题，此处不再提供演示。 HTML 标签插件为hexo-tag-htmltag，使用： 123{% htmlTag button type=&quot;button&quot; data-submit data-action=&quot;add&quot; aria-controls=&quot;calc&quot;%}Add 10{% endhtmlTag %} 等效HTML代码： 1&lt;button type=&quot;button&quot; data-submit data-action=&quot;add&quot; aria-controls=&quot;calc&quot;&gt;Add 10&lt;/button&gt; 由于作者已将该npm包删除，因此演示失效。1.作者为 刘慈欣。↩","link":"/post/019-hexo-new-things/"},{"title":"ASUS C302CA Chromebook 安装 Linux 和 Windows","text":"图源：@山桂贰 87141455 最近在咸鱼上淘到了一个二手的华硕 Chromebook（具体型号是 ASUS C302CA）。四核 M3-6Y30 + 8G 运行内存+ 32G eMMC 存储 + 12.5 寸触摸屏，虽然机身有少量磕碰，笔记本的转折铰链也有问题，但 800 元的价格着实实惠。 机器寄过来的时候依然是原装系统（Power Wash 过的 Chrome OS）。写个文章记录一将 OS 从 Chrome OS 换成 Manjaro 和 Windows 10 的过程。 拆写保护（WP）螺丝Chromebook 的 BIOS 都是为了配合 Chrome OS 而特殊定做的，因此无法用来启动其他操作系统，没有 BIOS 设置界面，也无法升级 BIOS。但是可能是出于修理和防止可能的 BIOS 紧急固件更新，制造商仍然允许使用者解除 BIOS 的写入保护。常见的保护方式在 Chromium Projects Wiki 里有详细说明： Application Processor (AP) Firmware AP firmware (also known as “SOC firmware”, “host firmware”, “main firmware” or even “BIOS”) typically resides on a SPI ROM. Protection registers on the SPI ROM are programmed to protect the read-only region, and these registers normally cannot be modified while the SPI ROM WP (write protect) pin is asserted. This pin is asserted through various physical means (see below), but with effort, users can unprotect devices they own. Embedded Controller (EC) Firmware The Chrome OS Embedded Controller (EC) typically has a WP input pin driven by the same hardware that generates SOC firmware write protect. While this pin is asserted, certain debug features (eg. arbitrary I2C access through host commands) are locked out. Some ECs load code from external storage, and for these ECs, RO protection works similar to SOC firmware RO protection (WP pin is asserted to EC SPI ROM). Other ECs use internal flash, and these ECs emulate SPI ROM protection registers, disabling write access to certain regions while the WP pin is asserted. 解除写保护的操作在 Wiki 里同样有说明： Methods of Asserting Write Protect Throughout the history of Chrome OS devices, three main methods have been implemented for asserting (and removing) write protect: Switch - a toggle switch asserts WP to the SOC firmware SPI ROM and EC. WP can be deasserted by disassembling the device and flipping the switch. Screw - a screw shorts a pad on the PCB. While this screw is inserted, WP is asserted. WP can be deasserted by disassembling the device and removing this special screw. cr50 - a special security chip asserts the WP signal. While a battery is present on the device, the WP signal will be asserted. Disassembling the device and physically disconnecting the battery causes WP to be deasserted. More information about which protection method is used for a particular device, and where to locate the switch / screw, is available on the developer info page. ASUS C302CA 这个型号的超极本使用的是”Screw（螺丝）“方法，因此我们需要拆开后盖，拧下主板上的 BIOS 写保护螺丝。注意在拆卸背板的时候，有两颗螺丝藏在上侧脚垫下，需要先用工具去除脚垫再拆卸这两颗螺丝。下侧的两个脚垫下没有螺丝。如图所示，图片来源请点击此处。 随后移除后盖，就能看到主板和电池。在主板上由小条黑布覆盖的螺丝即为写保护螺丝，小心拧下即可。位置见下图白色圈内，图片来源请点击此处。 拧下保护螺丝后，将后盖放回拧好。之后进入Chrome OS开发者模式。 进入开发者模式按住键盘上的Esc和“刷新”键不动，然后按下电源键。这样Chromebook会进入“恢复”模式——有点像安卓手机上的Recovery。 此步骤开始，由于真实操作时没有保留图片，因此借用来源于网络的图片说明操作步骤。 同时按下键盘上的Ctrl键和D键，提示如下： 按下Enter，系统重启： 这个时候应该会伴有一声BIOS提示音。这个提示音使用原版BIOS时是无法关闭的。为了安装其他操作系统和屏蔽该提示音，必须刷新BIOS。 随后等待Chrome OS重置即可。你需要重新配置和登录Chrome OS以启动Shell。 更换BIOS固件使用到的是第三方维护的BIOS，MrChromebox.tech。 可到这里（https://mrchromebox.tech/#devices）查询你的Chromebook有没有适配。 你需要准备：一个空的U盘 下面开始操作。首先开机登录已处于开发者模式的Chrome OS。按下组合键：Ctrl + Alt + F2。浏览器会打开新标签页，启动crosh。 输入命令shell，回车，会启动真实的Linux Shell。 插入空U盘，确保其已经挂载，随后在Shell内输入如下命令： 1234cdcurl -LO mrchromebox.tech/firmware-util.shsudo install -Dt /usr/local/bin -m 755 firmware-util.shsudo firmware-util.sh 成功下载并启动脚本后，有如下界面： 选择第一个选项（注：标识了“Full ROM”的选项），按照提示备份BIOS和刷入BIOS，重启，即可。 安装操作系统与正常电脑安装操作系统无异。需要注意以下几点： 只支持UEFI启动。因此诸如Windows 7或Tiny Core Linux之类的操作系统是不行的。 制作可启动U盘：Windows系列推荐使用Windows PE（如优启通），Linux系列推荐使用Rufus。 需要先使用分区工具，删除Chromebook的eMMC上所有分区后再进行安装。 对于C302，Linux下驱动基本完美。Win下驱动稍微复杂： 准备有线鼠标，通过扩展坞连接到Chromebook，临时代替触摸板。 链接WiFi，然后下载安装DriverBooster，可检测绝大多数驱动程序。将所有可更新的驱动程序更新至最新版本。 到这里（https://github.com/coolstar/driverinstallers/tree/master/crostouchpad），下载安装4.1版本驱动。 触摸板可以使用。触摸屏目前无解。 Windows和主流Linux下声卡问题目前无解，可用外置USB声卡或蓝牙耳机代替。如果你迫切需要使用Chromebook的内置扬声器，请安装GalliumOS。 内置eMMC存储空间较小。可通过SD卡槽插入SD卡（推荐Class10或更高），结合软链接（Linux、Windows均可）的方式保留存储空间。 Windows安装时推荐启用Compact压缩。","link":"/post/020-asus-c302-linux-installation/"},{"title":"【WIP】CMU 15-462 笔记 Part.1","text":"图片来源：@Lifeline 88401620 增补（感谢@oyiadin）：本系列笔记将添加《Games 101：现代计算机图形学入门》、《Games 102：几何建模与处理》、“龙书”（《Introduction to 3D Game Programming with DirectX 12》）三个额外来源的笔记。大段的非CMU课程的笔记会在显著位置标识。 Lecture 1什么是计算机图形学计算机图形学：利用计算机合成视觉信息或利用计算机合成/操控感官信息的学科。 计算机图形学的应用 影视 动画 游戏 数据可视化 工业设计，平面设计 数字绘画 虚拟现实 相同的内容后续整理VR课笔记时不再赘述。 虚拟现实（VR）：指所看到的一切均为虚拟的，比如虚拟现实游戏、虚拟现实视频等。 增强现实（AR）：指看到的是真实的现实 + 虚拟的、对当前现实进行分析处理或修改等生成的虚拟事物，比如Apple ARkit。 混合现实（MR）：VR + AR，使用类似VR的手段，达到AR这种结合当前现实与虚拟事物的效果，比如Hololens。 制造业（3D打印） 模拟 排版与字体设计 “The Quick Brown Fox Jumps Over The Lazy Dog”：一句有意义的英文句子，内含全部的26个英文字母，常用来对字体（字形、字号、间距等）进行测试。 “Lorem ipsum dolor sit amet, consectetur adipisicing elit.”：又叫“乱数假文”或者“哑元文本”。主要的目的为测试文章或文字在不同字型、版型下看起来的效果。更多资料请查阅：https://cn.lipsum.com/。 …… 计算机图形学与计算机视觉的区别计算机图形学：将数据转化为图形。也就是“画出来”。 计算机视觉：将图形转化为数据。也就是“看到”。 计算机图形学需要哪些基础 表示方法（编码） 采样与混叠 数学方法（表示动态和三位形体） 光线 透视 …… 对正方体建个模？ 如何表示 顶点：利用坐标 边：利用边的两个顶点唯一确定 如何绘制 三维图形转化为二维图形：小孔成像模型 设相机坐标为 $(a,b,c)$ ，待确定点的坐标为 $(x,y,z)$ 。要得到该点在二维平面上的坐标，可进行如下算法步骤： $(x,y,z)$ 与 $(a,b,c)$ 相减，得到原三维点与摄像机的相对位置； 将其中的 $(x,y)$ 与 $z$ 相除，得到 $(\\frac{x}{z},\\frac{y}{z})$，即是所求的 $(u,v)$。 连线。这就要细说到电脑如何绘制直线。 计算机怎么划线？先得知道计算机怎么显示图像：“光栅显示器”。 特点： 图像表示为由像素组成的二维网格。 每个像素可拥有不同的颜色值。 光栅化将连续的物体转换为离散的像素在光栅网格上的表示（即由栅格组成的图像）的过程。也即把顶点数据转换为片元的过程。 怎么光栅化？（简单讨论无粗细的直线） 直接的想法：只要原始的连续物体触及了某个像素，该像素就应该显示。缺点：误差大。 在部分图形API中的实现：菱形测试区域法。 …… 资料： https://docs.microsoft.com/zh-cn/windows/uwp/graphics-concepts/rasterization-rules 不一定是最优解：看需求。通过需求挑选不同的算法。 除了误差（锯齿），覆盖率也是衡量光栅化效果的重要指标之一。 怎么找到对应的栅格（像素）？ 暴力方法：遍历每一个像素，判断是否满足显示要求，满足就点亮进行显示。缺点：速度极慢。 “增值行光栅化”：简单的演示用自定义算法，利用直线的斜率，确定哪些像素用于显示。 设有一直线，起点为$(u_1,v_1)$，终点为$(u_2,v_2)$。假设有$u_1 &lt; u_2, v_1 &lt; v_2$且$0&lt;s&lt;1$。可依据如下过程寻找像素（伪代码）： 123456p = (u, v);v = v1;for(u = u1; u &lt;= u2; u++) { v += s; draw(u, round(v));} 以上是一个虽简单但完整的CG流程——从表示，到计算，到光栅化，再到显示。不过现实的CG环境要远远比这复杂。我们没有提到一些对图像（渲染）的真实感至关重要的知识和算法，譬如： 几何体，尤其是复杂几何体 材质，透明半透明或不透明 光线，照明 摄像机 运动 …… Games101 - L1：课程四大部分常见图形学API：OpenGL，（Vulkan），DirectX 光栅化 将几何基元投影至屏幕上，将投影后的几何基元拆分为“像素” （来源：https://vispy.org/getting_started/modern-gl.html）透视投影与平行投影。 光线追踪 从相机射出光线（采样视线）打到每个像素上。 计算交叉（intersection）和遮挡（shading）。 继续弹射（bounce）光线，直到回归光源 参考 http://blog.sina.com.cn/s/blog_15f7fa13f0102wg8c.html 和 https://en.wikipedia.org/wiki/Ray_tracing_(graphics)。 曲线与网格 计算机图形学中表示几何体的方法。 贝塞尔曲线 Catmull-Clark细分曲面，参考https://blog.csdn.net/McQueen_LT/article/details/106102609 Games 102 动画与模拟 关键帧（K帧）动画 弹簧质点（Mass Spring）系统模型，参见：https://zhuanlan.zhihu.com/p/79756413 Games 101 - L2：课程需求Lecture 2对线性代数的复习课。只记重点。 对向量进行处理时注意坐标系，除了是直角坐标系还是极坐标系外还要注意坐标系的原点。 向量基本性质： 提示要有探究精神，不要一味的接受“定理”和“定义”，要去思考为什么存在这个定理，这个定理在什么情况下对什么适用，等。 向量可以看成一种“函数”，即矩阵类比函数的观点。 向量的模：也叫向量的“长度”。具有很多性质。 非负性 连续性","link":"/post/027-cmu-cg-note-1/"},{"title":"【WIP】Synthesizer V 插件开发入门（1）","text":"图源：紺屋鴉江 - 《銀河》，Pid：94649749 写在前面本文并非“零基础入门”型的文章。阅读此文章前，建议你已经： 使用过 Synthesizer V Studio（即 SVR2，以下用此简称代替），了解过 VOCALOID，知道“插件”的作用是什么； 已购买 Synthesizer V Studio Pro 版本，以便于插件的开发与调试； 有一定的编程经验，使用过 Lua 语言； Synthesizer V Studio Pro的正版授权可从 平行四界官方淘宝店 或 Dreamtonics官方淘宝店 获取。关于 Lua 编程的资料数不胜数，可从 菜鸟教程 等网站获取。 另外，阅读时，可以配合下面两个文档： Home - Synthesizer V Studio Scripting Manual，官方的 Synthesizer V 插件 API 文档； Synthesizer V Studio 用户手册，由 磷元素P 大佬翻译的 Synthesizer V 使用手册和插件 API 文档； 正文部分存在问答部分，可能与后文的知识关联。你可以按顺序阅读，也可以在阅读完其他内容后再阅读问答部分。 以下是文章正文。 脚本存放位置SVR2 的软件数据默认保存在“我的文档”下，而脚本放置在其中的“scripts”子目录中。 以 Windows 系统为例，如果你没有移动过“我的文档”位置，那么路径应该是： 1C:\\Users\\&lt;你的用户名&gt;\\Documents\\Dreamtonics\\Synthesizer V Studio\\scripts 你可以在其中创建子目录分类存放不同种类的脚本。SVR2 安装时附带的插件默认放置在“Utilities”子目录下。 插件的基本结构SVR2 Pro 支持两种插件格式：JavaScript 插件，使用嵌入式的 Duktape 解释器；以及 Lua 插件，使用嵌入式的 Lua 5.4解释器。这里选择 Lua 作为编程示例语言，以便有 VOCALIOID 插件开发经验的人快速转向 SVR2 的插件开发。 SVR2 插件在结构上主要有以下几个部分： 插件信息函数：getClientInfo() 本地化函数：getTranslations() 入口点函数：main() 下面分别进行说明。同时注意，SVR2 软件在启动时会将所有的插件代码载入内存（但不会执行除 getClientInfo() 和 getTranslations() 外的其他部分），因而对插件代码做出的改动需关闭 SVR2 再启动 SVR2 才可生效。 插件信息插件信息由函数 getClientInfo() 控制。作用与 VOCALOID 的 JobPlugins 中 mainfest() 函数的作用类似，保存插件的名称、维护者、兼容性等信息。 其结构如下： 1234567891011121314151617--[[ @function getClientInfo 插件信息函数 @param nil 无参数 @return table 返回列表 @field name string 插件名字 @field author string 插件作者 @field versionNumber num 插件版本 @field minEditorVersion num 最低版本要求--]]function getClientInfo() return { name = '插件名字', author = '作者信息', versionNumber = 1, minEditorVersion = 65540 }end 其中： name：字符串，为插件的名称。会作为 SVR2 软件中“脚本-启动脚本”菜单中的显示名称。可以使用本地化字符串（将在后文讲解）。 author：字符串，为插件的作者信息，仅起提示作用，不会显示在软件中。同样可以使用本地化字符串。 versionNumber：数字，为插件的版本号，仅起提示作用，目前在 SVR2 内不会产生任何动作。 minEditorVersion：可使用该插件的最低 SVR2 版本号。SVR2 的版本号为 6 位 16 进制数字。例如：1.4.0 版本对应的版本号为 0x010400。上述例子中的版本号 65540 转为 16 进制得 0x010004，对应 SVR2 版本 1.0.4。若该值大于当前使用的 SVR2 版本号，则会触发错误提示。 问：既然 SVR2 会在启动时执行 getClientInfo()，那么是否可以在这个函数中添加其他的语句实现“随 SVR2 启动而自动执行”？ 答：是可以的，但过程不能阻塞。阻塞会使 SVR2 卡在启动画面。来看一个有点超纲的例子： 1234567891011121314function getClientInfo() -- 定义窗口 local form = { title = '自动启动了！' } -- 使用阻塞函数展示窗口 SV:showCustomDialog(form) return { name = 'Haha', author = 'Test', versionNumber = 2, minEditorVersion = 0x010004 }end 启动 SVR2 后的效果： 此处插件伴随 SVR2 的启动而自动启动了。关于插件是如何定义和显示 GUI 的，将在后文讲解。 本地化SVR2 内置多种界面语言，而插件的本地化功能可以使插件可根据 SVR2 界面语言的不同使用不同的字符串。这样一来，插件的翻译和更新都变得更加容易。VOCALOID 无此功能，因此在分发 VOCALOID 插件时经常需要同时分发多个翻译版本。 插件的本地化由函数 getTranslations() 控制。 其基本结构如下： 123456789101112131415--[[ @function getTranslations 本地化函数 @param langCode string 语言代码 @return table 返回字符串列表--]]function getTranslations(langCode) if langCode == 'zh-cn' then return { {'Hello', '你好'} } endend-- 使用本地化字符串local testStr = SV:T('Hello') 其中： en-us：字符串，为语言代码，由形参 langCode 给出。更多的语言代码可在 Language designators with regions 查看。常见的语言代码： 中文简体：zh-cn 中文繁体：zh-tw 英语：en-us 日语：ja-jp return：return的是一个二层嵌套的表。每一个子表都是如下形式： 1{'默认语言下的字符串', '目标语言下的字符串'} 默认语言下的字符串：当 getTranslations() 函数中对 langCode 的条件判断均不满足，无 return 时，将使用该字符串。本例中，“默认语言下的字符串”是英语“Hello”。当 SVR2 的语言是日语（ja-jp）时，字符串仍将使用“Hello”。 目标语言下的字符串：当 getTranslations() 函数中对 langCode 的条件判断满足且 return 二层链表时，将使用该字符串。本例中，若 SVR2 的语言是中文（zh-cn）时，字符串将使用“你好”。 SV:T()：使用本地化字符串。按照上述规则返回默认语言下的字符串或目标语言下的字符串。 问：既然 SVR2 也会在启动时执行 getTranslations()，那么是否也可以在这个函数中添加其他的语句实现“随 SVR2 启动而自动执行”？ 答：是可以的，但过程依然不能阻塞。阻塞的过程会使 SVR2 卡在启动界面。 也需同时注意它与 getClientInfo() 间的区别： 不能使用 SVR2 提供的同步的 GUI 相关函数，只能使用其异步版本。同步的 GUI 函数会使插件从插件列表中消失。（可能是Bug？） 例子如下： 12345678910111213function getTranslations(langCode) local form = { title = 'Execute!' } -- 非阻塞的 GUI 函数 SV:showCustomDialogAsync(form, nil) -- 照常 return 翻译 if langCode == 'zh-cn' then return { {'Plugin Name', '插件名字'} } endend 对同步和异步的 GUI 函数的细节将在后文描述。 每次插件启动都会执行 getTranslations()，而 getClientInfo() 只会在 SVR2 启动时执行一次。搭配这两个函数可以实现复杂的插件自动启动过程。 一个稍微超纲的例子如下： 1234567891011121314151617181920function getTranslations(langCode) local form = { title = 'getTranslations() 执行了！' } SV:showCustomDialogAsync(form, nil) if langCode == 'zh-cn' then return { {'Plugin Name', '插件名字'} } endend-- 入口点function main() local form = { title = 'main() 执行了！' } SV:showCustomDialog(form) SV:finish()end 从 SVR2 的“脚本”菜单中启动插件，效果如下： 在顺序上，getTranslations() 优先于 main() 被执行。 getTranslations() 中不能使用 SV:T()。使用 SV:T() 不会报错，但始终返回默认语言下的字符串。 问: 既然 getClientInfo() 与 getTranslations() 都会在启动时被执行，那么它们的先后顺序是什么？ 答：getTranslations(langCode) 优先于 getClientInfo() 被执行。 入口点就像C语言程序需要 int main() 作为入口点才能编译为独立的直接运行的程序一样，插件也有类似的入口点函数 main()。 其结构如下： 12345678--[[ @function main 入口点函数 @param nil 无参数 @return nil 无返回值--]]function main() -- 此处放置代码end 该函数只会在插件从“脚本”菜单中启动时被执行。 插件界面界面是插件的一个重要组成部分。用户通过界面了解插件的作用、通过界面提供和调整插件所需的参数、通过界面获取插件的各种提示信息等。 SVR2 提供了两套显示 GUI 的函数：同步的函数和异步的函数。所有函数均是宿主对象 SV 的方法。 宿主对象对象 SV 就是宿主对象（Host Object）。宿主对象保存了当前宿主（即正在运行的 SVR2 软件）内的部分数据（如软件信息、播放状态、音符状态等）。SVR2 为了方便开发者，还在 SV 对象的父类中定义了许多的工具函数（如频率与音名互相转换、时间单位互相转换等，在后文详细说明）。 宿主对象的父类会在 SVR2 启动时被实例化。同一时间运行的两个 SVR2 中的宿主对象相互独立。 界面类型 输入框 由函数 SV:showInputBox()（同步）及函数 SV:showInputBoxAsync() （异步）定义。提供输入框的窗口标题、输入框上方的提示信息、输入框的默认值（异步函数还需提供回调函数的函数名）作为函数参数，用户的输入内容作为返回值。 例子如下： 123456789101112131415161718192021222324-- 同步版本--[[ @param title string 标题 @param message string 提示消息 @param defaultText string 输入框的默认值 @return string 用户的输入结果--]]local userInput = SV:showInputBox(title, message, defaultText)-- 异步版本--[[ @function callback 回调函数 @param userInput string 用户的输入结果 @return nil 无返回值--]]function callback(userInput) -- 此处加入代码end--[[ @param callback function 回调函数名 @return nil 无返回值--]]SV:showInputBoxAsync(title, message, defaultText, callback) 消息框 由函数 SV:showMessageBox() （同步）及函数 SV:showMessageBoxAsync() （异步）定义。提供消息框的窗口标题和消息内容（异步函数还需提供回调函数的函数名）作为参数，无返回值。 例子如下： 1234567891011121314151617181920212223-- 同步版本--[[ @param title string 标题 @param message string 消息内容 @return nil 无返回值--]]SV:showMessageBox(title, message)-- 异步版本--[[ @function callback 回调函数 @param nil 无参数 @return nil 无返回值--]]function callback() -- 此处加入代码 end--[[ @param callback function 回调函数名 @return nil 无返回值--]]SV:showMessageBoxAsync(title, message, callback) “确定-取消”框 由函数 SV:showOkCancelBox() （同步）及函数 SV:showOkCancelBoxAsync() （异步）定义。名称来自于窗口中的两个按键“确定”和“取消”。提供“确定-取消”框的窗口标题和窗口内容（异步函数还需提供回调函数的函数名）作为参数。当用户按下“确定”时返回布尔值“true”，按下“取消”时返回布尔值“false”。 例子如下： 1234567891011121314151617181920212223-- 同步版本--[[ @param title string 标题 @param message string 窗口内容 @return boolean 用户确认或取消--]]local userChoice = SV:showOkCancelBox(title, message)-- 异步版本--[[ @function callback 回调函数 @param userChoice boolean 用户确认或取消 @return nil 无返回值]]function callback(userChoice) -- 此处加入代码end--[[ @param callback function 回调函数 @return nil 无返回值--]]SV:showOkCancelBoxAsync(title, message, callback) “是-否-取消”框 由函数 SV:showYesNoCancelBox() （同步）及函数 SV:showYesNoCancelBoxAsync() （异步）定义。名称来自于窗口中的三个案件“是”、“否”与“取消”。提供“是-否-取消”框的窗口标题和窗口内容（异步函数还需提供回调函数的函数名）作为参数。返回字符串“yes”、“no”和“cancel”，分别对应用户按下“是”、“否”和“取消”按键。 例子如下： 1234567891011121314151617181920212223-- 同步版本--[[ @param title string 标题 @param message string 窗口内容 @return string 用户选择--]]local userChoice = SV:showYesNoCancelBox(title, message)-- 异步版本--[[ @function callback 回调函数 @param userChoice string 用户选择 @return nil 无返回值--]]function callback(userChoice) -- 此处加入代码end--[[ @param callback function 回调函数名 @return nil 无返回值]]SV:showYesNoCancelBoxAsync(title, message, userChoice) 同步函数与异步函数每个 GUI 函数均有同步的和异步的两个版本。在函数定义上，异步函数以“Async”结尾且均没有返回值，形参较同步函数多一个回调函数名称。 与JavaScript中的Async/Await、Python中的yield一样，异步函数不会阻塞脚本的执行，而同步函数会阻塞脚本的执行，直到窗口关闭（得到返回值）。 自定义界面预定义的几种界面类型只提供了有限的输入类型（输入框的字符串、带按钮的窗口框的按钮等），很难满足功能复杂的插件的要求。因此 SVR2 提供了绘制自定义界面的函数：SV:showCustomDialog() （同步）与 SV:showCustomDialogAsync() （异步）。 其基本结构如下： 12345678910111213141516171819202122232425262728293031323334353637--[[ @variable exampleForm table 窗口结构变量 @field title string 窗口标题 @field message string 窗口提示信息 @field buttons string 按钮类型，将在后文详解 @field widgets array 窗口工具，将在后文详解--]]local exampleForm = { title = '示例窗口', message = '这是一个示例提示信息', buttons = 'OkCancel', widgets = { -- 此处内容将在后文详解 }}-- 同步版本--[[ @param exampleForm table 窗口结构 @return object 返回记录窗口输入信息的对象，将在后文详解--]]local dialogResult = SV:showCustomDialog(exampleForm)-- 异步版本--[[ @function callback 回调函数 @param dialogResult object 记录窗口输入信息的对象--]]function callback(dialogResult) -- 此处加入代码end--[[ @param callback function 回调函数名 @return nil 无返回值--]]SV:showCustomDialog(exampleForm, callback) 按钮类型按钮类型共有两种： “OkCancel”：对应着界面类型中的“确认-取消框”。 “YesNoCancel”：对应着界面类型中的“是-否-取消”框。 “Message”：对应着界面类型中的消息框。（注：可能是翻译问题，按钮上的文字是“取消”而不是“确定”，后续可能修正） 提示信息提示信息直接显示在标题的下方，可以用来概述插件用途、指示用户操作或显示插件作者信息等。支持使用转义字符。 举例如下： 1234local form = { title = '标题', message = '提示信息第一行！\\n第二行！'}","link":"/post/021-synthv-plugin-intro/"},{"title":"【WIP】C 语言拾遗 Part.1","text":"long 与 long longlong 一般占用4~8字节，long long 至少 占用8个字节。不同的平台和编译器，长度可能不同。 sizeof() 运算符注意 sizeof() 属于运算符的一种，这个运算符用于测量括号内的变量（或类型）占用的字节数量。多数情况下，这一数量在编译时确定，因此 sizeof() 的运行结果是一个编译时常量。但也有例外，如C99标准引入的变长数组特性。该类数组的size需在程序运行时、数组开辟后确定。 由于是编译时常量，括号内如果是表达式，则表达式不会被执行。 123int a = 1; // a = 1int b = sizeof(a++); // b = 4// a = 1, a++ 没有执行 浮点数精度问题老生长谈的话题了。由于误差，以下的逻辑判断结果都是成立（1）： 12(0.1 + 0.1 + 0.1) != 0.3; // 1;1 + (1e123 - 1e123) != (1 + 1e123) - 1e123; // 1; 没有 body 的 for 循环可以写成如下形式： 123for(i = 0; i &lt; 10; i++) { ;} 或者如下形式： 1for(i = 0; i &lt; 10; i++); 三目运算符1a ? b : c 等价于 123456if(a){ b;}else{ c;} 这没什么可说的。 面条式代码面条式代码（Spaghetti code）最初指代码过度使用goto等破坏程序结构化（顺序结构、选择结构、循环结构）的关键字的代码。现也泛指不满足项目代码规范的代码、缺乏代码风格的代码、项目要求经常变化导致过度冗余的代码或缺乏项目编程经验者写出的代码。 limits.hC语言标准库之一，包含了常见数据类型的数据上界和数据下界。节选代码： 123456789101112131415161718192021222324252627282930313233343536373839/* Maximum value an `unsigned char' can hold. (Minimum is 0). */#undef UCHAR_MAX#define UCHAR_MAX 255/* Minimum and maximum values a `char' can hold. */#ifdef __CHAR_UNSIGNED__#undef CHAR_MIN#define CHAR_MIN 0#undef CHAR_MAX#define CHAR_MAX 255#else#undef CHAR_MIN#define CHAR_MIN (-128)#undef CHAR_MAX#define CHAR_MAX 127#endif/* Minimum and maximum values a `signed short int' can hold. */#undef SHRT_MIN#define SHRT_MIN (-32768)#undef SHRT_MAX#define SHRT_MAX 32767/* Maximum value an `unsigned short int' can hold. (Minimum is 0). */#undef USHRT_MAX#define USHRT_MAX 65535/* Minimum and maximum values a `signed int' can hold. */#ifndef __INT_MAX__#define __INT_MAX__ 2147483647#endif#undef INT_MIN#define INT_MIN (-INT_MAX-1)#undef INT_MAX#define INT_MAX __INT_MAX__/* Maximum value an `unsigned int' can hold. (Minimum is 0). */#undef UINT_MAX#define UINT_MAX (INT_MAX * 2U + 1) 十六进制和 printf十六进制可以直接用于赋值。比如下列语句可将a赋值为1： 1int a = 0x01; 要注意printf在进行格式化输出的时候，float和double类型都可以用%f，而dobule类型也可以用%lf。long double类型需要使用%Lf。 具体标准（C99）如下： 多行注释的问题注意C语言的多行注释是不会嵌套的。看下面的例子： 1234/*Change &quot;username&quot; and &quot;password&quot; to /* your account's identity. */Enjoy!*/ 多行注释自第一个/*起，至第一个*/止，中间的一切/*均做注释内字符串而不是多行注释起始符进行处理。如上面例子，多行注释在第二行截止，第三行的Enjoy!和第四行的*/均不在多行注释内。","link":"/post/028-c-programming-gaps-filling/"},{"title":"【WIP】CMU 15-213 笔记 Part.1","text":"Lecture 1实验Lab1：数据实验，用位运算方式实现计算器 Lab2：炸弹实验，学会GDB Lab3：攻击实验，代码注入和ROP Lab4：缓存实验，写个缓存模拟器并优化 Lab5：Shell实验，写一个完整的Linux Shell Lab6：Malloc实验，写自己的Malloc库 Lab7：代理实验，写自己的Web Proxy Lecture 2 比特、字节和整数 long double数据类型：在传统的32位架构或64位架构中是没有的。但在x86-64架构中占10或16字节（内存对齐）。 32位架构的指针为32位（4字节），64位架构的指针为64位（8字节）。 布尔代数：和 或 非 异或 位运算符 &amp; | ~ ^，逻辑运算符 &amp;&amp; || ! 逻辑运算的短路特性 逻辑位移和算数位移： 在位移运算符之前的数（比如$x&lt;&lt;y$中的$x$）是无符号数的话，位移运算对应的汇编指令为逻辑位移。若是有符号数，该运算对应的汇编指令是算数位移。 对于左移：二者都是在右侧补0。 对于右移：逻辑位移补0，算数位移补最高有效位（符号位）。如：令$x=10100000_{(2)}$，右移3位，逻辑位移结果$x&gt;&gt;3=00010100_{(2)}$，算数位移结果$x&gt;&gt;3=11110100_{(2)}$。 位移数小于0（即$x&lt;&lt;y$中的$y$小于0）或大于数据类型占用的长度（如char类型中y大于8）是未定义的操作。结果和编译情况依编译器和架构变化。 正数原码转十进制：求2的幂次加和即可。 $$ B2U(X) = \\sum^{w-1}_{i=0}{x_i \\cdot 2^i} $$ 补码转十进制：注意符号位。也可写成公式。 $$ B2T(X) = -x_{w-1} \\cdot 2^{w-1} + \\sum^{w-2}_{i=0}{x_i \\cdot 2^i} $$ 补码计算举例：将补码$101101_{(2)}$化为十进制。 $$ 依据公式，\\\\ 101101_{2} = 2^{0} \\cdot 1 + 2^{1} \\cdot 0 + 2^{2} \\cdot 1 + 2^{3} \\cdot 1 + 2^{4} \\cdot 0 + 2^{5} \\cdot (-1) \\\\ = 1 + 0 + 4 + 8 + 0 - 32 = -19 $$ 无符号数最大值$2^w - 1$，最小值$0$。有符号数最大值$2^{w-1} - 1$，最小值$-2^{w-1}$。 补码对数的映射具有“对称性”。 补码与原码（无符号位）间的转化。 C语言上二者的互相转化。 12tx = (int) ux;uy = (unsigned) ty; // unsigned 等价于 unsigned int 有符号数与无符号数进行操作时（例如，有符号数与无符号数相加），有符号数会被隐式转换为无符号数。 注意在有条件限定的情况下，下列运算的运算结果： 一个C编程中的典型错误： 1234567891011int a[250] = {0};unsigned int i; // 注意是无符号整型for(i = 249; i &gt;= 0; i--) { a[i] = 5;}/*运行的结果为：遍历数组a，每个元素均赋值为5后，访问非法下标。由于i是无符号的数，i=0时for循环进行后，i--，导致i溢出为4294967295。*/ 符号扩展：对有符号整数的类型转换是通过左侧截断和左侧补最高有效位（符号位）实现的。 例子：设6位整数a的十进制值为10，则其二进制位为$001010$。将其扩展为10位整数，二进制位为$0000001010$。 设6位整数的十进制值为-10，则其二进制位（补码）为$110110$。将其扩展为10位整数，二进制位为$1111110110$。 原码取2的幂次模：相当于从右边截断。 例子：数字10对4取模。通过十进制计算，$10=4*2+2$，得取模结果为2。 从原码的角度来看，10的原码为$1010_{(2)}$。对4取模，即对$2^2$取模。从右向左保留两位后截断即可，结果即为$10_{(2)}$，转化为10进制为2。 Lecture 3","link":"/post/029-cmu-csapp-note-1/"},{"title":"【持续更新】算法与数据结构回顾 - 大纲","text":"由于高中接触过，大学本科期间又深入了些，以防忘记记一些注意事项、概念和模板之类的东西。 简单分类数据结构 一维： 基础：数组（Array），链表（Linked list) 高级：栈（Stack），队列（Queue），双端队列（Deque），集合（Set），映射（Map）等。 二维： 基础：树（Tree），图（Graph） 高级：二叉搜索树（BST），堆（Heap），并查集（Disjoint Set），字典树（Trie）等。 特殊结构： 位运算（Bitwise），布隆过滤器（BloomFilter） 缓存（LRU） …… …… 算法 分支（if-else，switch） 迭代（for，while） 递归（分治法，回溯法等） 搜索（深搜，广搜，A*等） 动态规划 二分查找 贪心 计算几何 …… 文章目录数据结构 广义表：算法与数据结构回顾 - 广义表，代码","link":"/post/030-algorithm-outline/"},{"title":"【WIP】算法与数据结构回顾 - 广义表","text":"图源：@Rella 《glow》 91882132 简述广义表是线性表的一种推广。线性表要求表中元素拥有统一的类型，而广义表无此限制。需要注意的是，广义表和线性表长度一般认为是有限的，但广义表的深度可以是无限的（即递归表）。 广义表是一种数据结构。对广义表的常见操作包括： 创建 从字符串形式创建 销毁 复制 取表头 取表尾 判空 求长度 求深度 从表头插入 从表头删除 遍历 广义表是Lisp语言的基本数据结构。后文以Common Lisp和C++给出各基本操作的示例。 名词注解长度指广义表中的元素个数。举例如下： 例一 1(a, b) 该表中共有两个元素：原子项a，原子项b。因而该表的长度为2。 例二 1(a, (b, c)) 该表中共有两个元素：原子项a，广义表(b, c)。因而该表的长度为2。 深度指广义表中子表的嵌套层数。举例如下： 例一 1(a, b) 该表中没有子表，因而该表的深度为1。 例二 1(a, (b, c)) 该表中嵌套了一个无嵌套的子表，因而该表的深度为2。 例三 1((a, b), (c, d)) 该表中嵌套了两个无嵌套的子表，因而该表的深度为2。 例四 1(a, (b, (c, d))) 该表中嵌套了1个子表，子表中嵌套了1个无嵌套的子表，因而该表的深度为3。 可理解为广义表字符串形式中括号的层数。 子表嵌套在广义表中的广义表叫做该广义表的字表。例如： 1(a, (b, c)) 称(b, c)是(a, (b, c))的字表。 原子项不可作为广义表再分的元素。例如： 1(1, (a, b)) 上表中1不是广义表，对广义表来说不可再分，因此是原子项。 上表中(a, b)是广义表，可以被分割为(a)与(b)，因此不是原子项。 字符串形式（书写形式）一种广义表的序列化方法。即将广义表写成由括号、原子项的值、（逗号）等组成的字符串。例如： 1(1 2 (A B)) 与 1(1, 2, (A, B)) 都是常见的广义表的书写形式。 Lisp 中的实现使用SBCL Lisp环境。 创建使用cons函数可以创建列表。例如创建一个只包含数字1（表头为原子项整数1，表尾为空）的列表： 1(cons 1 nil) 或者： 1(list 1) 也可以根据已有的表头和表尾创建列表： 1(cons 1 '(2 5)) 也可以使用符号。 1(cons 'a '(b 2)) 设置变量X为列表(1 A B)，作为接下来的示例： 1(let ((x (cons 1 '(a b)))) (prin1 x)) 输出为： 1(1 A B) 复制可以理解为变量传值。 123(let ((x (cons 1 '(a b)))) (let ((y x)) (prin1 y))) 输出为： 1(1 A B) 取表头使用car函数。 1(let ((x (cons 1 '(a b)))) (car x)) 输出为： 11 此时输出为原子项。 取表尾使用cdr函数。 1(let ((x (cons 1 '(a b)))) (cdr x)) 输出为： 1(A B) 此时输出为广义表。 求长度使用length函数。 例一 有广义表(1 A B)，求长度。 1(length '(1 A B)) 得到结果为3。 例二 有广义表(1 (A B))，求长度。 1(length '(1 (A B))) 得到结果为2。 判空广义表的长度为0即为空。 1(if (= (length '()) 1) t nil) 得到结果为NIL。 从表头插入反复应用函数cons可以实现从表头将数据插入广义表。 123(let ((x (cons 1 '(A B)))) (setf x (cons 3 (cons 2 x))) (prin1 x)) 输出为： 1(3 2 1 A B) 从表头删除反复应用函数cdr可以实现从表头删除数据。 123(let ((x (cons 1 '(a b)))) (setf x (cdr (cdr x))) (prin1 x)) 输出为： 1(B) 求深度基本思路：递归求解。 定义函数list-depth，接受变量list作为参数 判断list是否为广义表，不是则直接返回0 若list是广义表，则： 对该广义表中的每一个元素调用list-depth，使用mapcar实现这一操作。返回值组成一张广义表。 取该广义表的最大值。 （赋初始值，可选项） 将已有的最大深度值 +1。 123456(defun list-depth (list) (if (listp list) (+ 1 (reduce #'max (mapcar #'list-depth list) :initial-value 0)) 0)) 调用： 1(list-depth '(1 (2 3))) 输出为： 12 存储结构由于广义表的特性，其很难使用顺序结构进行存储。因此广义表多建立在链式存储的模式之上。 讨论只含有两种可能结点的广义表： int(32)类型的原子项结点 由int(32)类型构成的广义表结点 因此可以设计存储结构如下： 其中，Node.type指明了结点的类型：为false时代表该结点是原子项结点，为true时代表该结点为子表结点。 C - C++ 实现数据结构定义设置“表结构”和“结点结构”。“表结构”中保存该表的头结点指针，及表的长度。当表为空表时，其头结点指针为nullptr。 按一般考核要求，显式设置类型别名，不使用对象，不使用未经允许的STL模板，不使用类型推导，忽略常量标识和异常处理等内容等（“C-styled C++”）。如有需求可自行按照逻辑改写。 12345678910111213141516171819typedef struct Node{ bool type; Node *next; union { ElementType atom; Node *nodePointer; } nodeContent;}NodeType;typedef struct List{ int length; Node *head;}ListType; 随后逐一实现基本方法。 创建把表和各结点都放在堆里。 12345void construct_list(ListType **gList){ *gList = new ListType{0, nullptr}; return;} 销毁12345void destroy_list(ListType **gList){ delete *gList; return;} 判空利用“表结构”中的length即可。 1234567bool check_list_empty(ListType *gList){ if (gList-&gt;length == 0) { return true; } return false;} 求长度同上。 1234int get_list_length(ListType *gList){ return gList-&gt;length;}","link":"/post/031-algorithm-generalized-list/"},{"title":"【持续更新】常用DCC软件下载安装破解指南","text":" 请输入密码","link":"/post/032-dcc-soft-download-install/"},{"title":"【WIP】算法与数据结构回顾 - 栈","text":"简述栈是一种常见的数据结构，由于其“后进先出”（LIFO）的特性而被广泛使用。栈的常见逻辑结构如下：","link":"/post/033-algorithm-stack/"},{"title":"【WIP】Linux &amp; Windows 小技巧（4）：再谈展台模式","text":"图源：《失われた深淵・宵宫》 @void_0 100377150 Microsoft Edge 展台模式在 《小技巧（3）》 中，我以 Microsoft Edge 为例简单描述了 Windows 展台模式的使用场景和设置方法。 展台模式适用于以下情况： 商场电子展柜或企业宣传展板等； 数据可视化大屏、监控大屏、比赛情况大屏等； 图书馆用于书籍查询的公用电脑、机构办事处用于自助办理手续的公用电脑等； 即需要保持全屏情况下限定用户（管理员或使用者）访问某站点内的页面并使用户能正常与页面交互的情况下均可以考虑展台模式。 而 Windows 展台模式为操作系统级功能，配置流程较复杂、可能影响操作系统稳定性，且直接使用设置 App 配置的展台模式同时只能运行 1 个程序（Single-app kiosk mode）。如果只是想临时启动 Edge 的展台模式，或是在运行 Edge 的同时运行其他程序，再或者是在 Linux 或 macOS 下启动展台模式，最简便的办法是直接使用命令行。 启动命令Edge 是基于 Chromium 二次开发的浏览器。因此，与 Chromium 启动展台模式的命令类似： 1.\\chrome.exe --kiosk 'https://www.baidu.com' 定位到 msedge.exe 所在路径，一般为： 1C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe 在该路径下启动 PowerShell，以百度为例启动展台模式： 1.\\msedge.exe --kiosk 'https://www.baidu.com' --edge-kiosk-type=fullscreen 参数各命令行参数的用途如下1： 参数 --kiosk 指定了启动展台模式时默认打开的URL。URL中含有 &amp; 等特殊字符时需用单 / 双引号包裹。 参数 --edge-kiosk-type 指定了展台模式的类型，共有两种： fullscreen：全屏模式，网页将以全屏方式显示，标签栏和地址栏将被隐藏。 public-browsing：公共浏览模式，效果同 Windows 展台模式下的 Edge。该模式仅在 Windows 上可用。 以上两种模式均会自动使用隐私模式（InPrivate），并屏蔽鼠标右键菜单。 参数 --no-first-run：当 Edge 没有初始化就进入展台模式时，使其不显示配置向导。 参数 --kiosk-idle-timeout-minutes 用于指定间隔多久重置展台模式，删除浏览数据。 通过快捷方式启动可将以上参数加入到 msedge.exe 的快捷方式中，这样就可以实现双击快捷方式启动展台模式的 Edge。 Firefox 展台模式与 Edge 类似，Firefox 也有适用于公用电脑或企业展台的展台（Kiosk）模式。 为什么？Firefox 展台模式的特点如下： Edge的展台模式并不支持扩展（Extensions），而Firefox的展台模式支持。如果你依赖某款插件的功能（且该插件兼容Firefox），则应使用Firefox。 Firefox相比Edge支持更多Linux发行版，甚至部分BSD。你同样可在这些设备上开启展台模式。 可以选择不使用隐私模式（Private Window）开启展台模式， 怎么做？“微调”浏览器设置Google Chrome、Edge 与 Firefox 均提供针对企业的管理模板，可对浏览器进行用户级或系统级的、细致的设置，从而影响浏览器的功能和行为。这也意味着，通过管理模板中的设置，我们可以改变两款浏览器展台模式的效果，或是增强其安全性。 下载管理模板 Chrome 的管理模板在“Chrome Enterprise”网站中：Download Chrome Browser for Your Business - Chrome Enterprise Edge 的管理模板在“Microsoft Edge for business”网站中：Download Edge for Business | Microsoft Firefox 的管理模板在 Github 上托管：Releases · mozilla/policy-templates Windows 下的使用：组策略编辑器下载的压缩包中包含许多文件，实际使用只需要其中的 ADMX 文件和 HTML 文档。ADMX 的安装需要管理员权限： Edge：打开 MicrosoftEdgePolicyTemplates.cab\\MicrosoftEdgePolicyTemplates.zip\\windows\\admx，将其中的三个 ADMX文件和 zh_CN 文件夹（如果操作系统是其他语言，则选择对应语言的文件夹）解压到 C:\\Windows\\PolicyDefinitions 中。 Chrome：打开 policy_templates.zip\\windows\\admx，同上所述解压两个 ADMX 文件和对应语言的文件夹。 Firefox：打开 policy_templates_v4.1.zip\\windows，同上所述解压两个 ADMX 文件和对应语言的文件夹。 随后打开本地组策略编辑器 - 管理模板，即可看到设置： 随后依据需求修改设置。以 Firefox 为例：默认状态下，Firefox 在启动展台模式后不会禁止用户使用 F12 键打开开发者工具。在组策略中找到 管理模板\\Mozilla\\Firefox\\禁用开发者工具 ，修改为“已启用”即可禁止 F12 键打开开发者工具。 Windows 下的使用：直接修改注册表文档首先需要从压缩包中的文档中获取设置项名称。以中文为例： Chrome：打开 policy_templates.zip\\common\\html\\zh-CN\\chrome_policy_list.html，找到需要修改的设置项，即可看到它对应的注册表键的位置和合法的键值（图中红框所示）。 在线查看 Chrome 管理模板文档：Chrome Enterprise Policy List &amp; Management | Documentation Edge：打开 MicrosoftEdgePolicyTemplates.cab\\MicrosoftEdgePolicyTemplates.zip\\html\\zh-CN\\msedgepolicylist.html，即可看到键位置和合法键值（图中红框所示）。 在线查看 Edge 管理模板文档：Microsoft Edge Browser Policy Documentation | Microsoft Docs Firefox：打开 policy_templates_v4.1.zip\\README.md，即可看到键位置和合法键值（图中红框所示）。 在线查看 Firefox 管理模板文档：policy-templates/README.md at master · mozilla/policy-templates 构造 PowerShell 命令根据文档中的描述构造修改 Windows 注册表的 PowerShell 命令。 与“本地组策略编辑器”中的“计算机配置”（对所有用户都生效）和“用户配置”（只对当前用户生效）相对应，两个存放组策略设置项的注册表位置分别为：HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies 和 HKEY_CURRENT_USER\\Software\\Policies。 HKEY_LOCAL_MACHINE\\ 在命令中简写为 HKLM: HKEY_CURRENT_USER\\ 在命令中简写为 HKCU: 构造命令时使用到的 PowerShell 命令为： 创建注册表项：New-Item 重命名注册表项：Rename-Item 删除注册表项：Remove-Item 查询注册表项：Get-Item 创建注册表键值对：New-ItemProperty 修改注册表键值对的值：Set-ItemProperty 重命名注册表键值对：Rename-ItemProperty 删除注册表键值对：Remove-ItemProperty 查询注册表键值对的值：Get-ItemProperty PowerShell 命令的参数主要有： -Path：项或键值对的位置 -Name：项或键值对的名称 -Value：键值对的值 -PropertyType：键值对的数据类型，常用类型如下 String：字符串，对应注册表中的 REG_SZ 类型； DWord：32位整数（双字节整数），对应注册表中的 REG_DWORD 类型； Qword：64位整数（四字节整数），对应注册表中的 REG_QWORD 类型； Binary：二进制数据，对应注册表中的 REG_BINARY 类型； 其他参数及更详细解释，可参照 Working with Registry Entries - PowerShell | Microsoft Docs 和 Microsoft.PowerShell.Management Module - PowerShell | Microsoft Docs 以上图中 Firefox 的 DisableDeveloperTools 设置项为例，构造的命令如下： 12345678910111213141516# 如果 Mozilla\\Firefox 项不存在，则创建项if (-Not (Get-Item -Path 'HKLM:Software\\Policies\\Mozilla')) { New-Item -Path 'HKLM:Software\\Policies' -Name 'Mozilla'}if (-Not (Get-Item -Path 'HKLM:Software\\Policies\\Mozilla\\Firefox')) { New-Item -Path 'HKLM:Software\\Policies\\Mozilla' -Name 'Firefox'}# 如果键值对不存在则创建，存在则修改值if (Get-ItemProperty -Path 'HKLM:Software\\Policies\\Mozilla\\Firefox' -Name 'DisableDeveloperTools') { Set-ItemProperty -Path 'HKLM:Software\\Policies\\Mozilla\\Firefox' -Name 'DisableDeveloperTools' -Value '1'}else { New-ItemProperty -Path 'HKLM:Software\\Policies\\Mozilla\\Firefox' -Name 'DisableDeveloperTools' -Value '1' -PropertyType 'DWORD'} 使用 PowerShell 执行以上代码后启动 Firefox，开发者工具便被禁用。 Linux 下如何实现管理模板中的设置1.Configure Microsoft Edge kiosk mode | Microsoft Docs↩","link":"/post/034-linux-windows-tricks-04/"}],"tags":[{"name":"完成编写","slug":"完成编写","link":"/tags/%E5%AE%8C%E6%88%90%E7%BC%96%E5%86%99/"},{"name":"小tricks","slug":"小tricks","link":"/tags/%E5%B0%8Ftricks/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"压制技术","slug":"压制技术","link":"/tags/%E5%8E%8B%E5%88%B6%E6%8A%80%E6%9C%AF/"},{"name":"WIP","slug":"WIP","link":"/tags/WIP/"},{"name":"Snort","slug":"Snort","link":"/tags/Snort/"},{"name":"IDS","slug":"IDS","link":"/tags/IDS/"},{"name":"Rime","slug":"Rime","link":"/tags/Rime/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"WriteUp","slug":"WriteUp","link":"/tags/WriteUp/"},{"name":"游戏解包","slug":"游戏解包","link":"/tags/%E6%B8%B8%E6%88%8F%E8%A7%A3%E5%8C%85/"},{"name":"PHP相关","slug":"PHP相关","link":"/tags/PHP%E7%9B%B8%E5%85%B3/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"搞机玩家","slug":"搞机玩家","link":"/tags/%E6%90%9E%E6%9C%BA%E7%8E%A9%E5%AE%B6/"},{"name":"CG","slug":"CG","link":"/tags/CG/"},{"name":"VOCALOID","slug":"VOCALOID","link":"/tags/VOCALOID/"},{"name":"SynthV","slug":"SynthV","link":"/tags/SynthV/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"CSAPP","slug":"CSAPP","link":"/tags/CSAPP/"},{"name":"持续更新","slug":"持续更新","link":"/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"}],"categories":[{"name":"杂谈","slug":"杂谈","link":"/categories/%E6%9D%82%E8%B0%88/"},{"name":"自由探索","slug":"自由探索","link":"/categories/%E8%87%AA%E7%94%B1%E6%8E%A2%E7%B4%A2/"},{"name":"媒体技术","slug":"媒体技术","link":"/categories/%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF/"},{"name":"网络安全","slug":"网络安全","link":"/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"输入法","slug":"输入法","link":"/categories/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"开发与代码","slug":"开发与代码","link":"/categories/%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BB%A3%E7%A0%81/"},{"name":"CG","slug":"CG","link":"/categories/CG/"}],"pages":[{"title":"友情链接","text":"链接不分先后顺序 Li4n0 http://0n0.fun/ Vidar-Team | Web | 超多 CVE LuckyCat https://blog.luckycat.moe/ Vidar-Team | Web | Go Oyiadin https://chenxy.me/ Vidar-Team | ML | 开发 | CG ACce1er4t0r http://www.vctorcontrol.cn/ Vidar-Team | Web Veritas501 https://veritas501.space/ Vidar-Team | PWN LoRexxar https://lorexxar.cn/ Vidar-Team | Web | 审计 | 智能合约 ckj123 https://www.ckj123.com/ Vidar-Team | Web Lou00 http://blog.lou00.top/ Vidar-Team | Web | 上岸大佬 E99p1ant https://github.red/ Vidar-Team | Web | Go | Redis Annevi https://annevi.cn/ Vidar-Team | Web | K8s Roc826 https://roc826.cn/ Vidar-Team | Web | CMS审计大师 MatrixTang https://matrixkook.github.io/ Vidar-Team | C++ | Rust Wzyxv1n https://wzyxv1n.top/ Vidar-Team | 设计 | 美术 | ACM/ICPC Michael https://git.michaelsblog.top/ Vidar-Team | Web | Java | Golang CafuChino http://www.cafuchino.cn/ SYTV | 前端 | Node Y https://blog.xyzz.ml/ Vidar-Team | Reverse | Windows R4U https://r4u.top/ Vidar-Team | Web 0x4qe https://0727.site/ Vidar-Team | Web | 前端 fl0a1e https://fl0.top/ Vidar-Team | 设计 | 美术 | 前端 xiaoyu https://www.xi4oyu.top/ Vidar-Team | PWN | Reverse r000setta https://r000setta.github.io/ Vidar-Team | Java | CG | C++ Moesang https://blog.wz22.cc/ Vidar-Team | Web | 运维 | 网络 Danisjiang https://www.danisjiang.com/ Vidar-Team | Reverse GaMiSon http://aw.gamison.top/ Added at 2021/03/16 17:00 Trotsky https://altonhe.github.io/ Vidar-Team | Reverse | Android | Go 357 https://x9un.github.io/ Vidar-Team | Web | 前端 d1gg12 https://thesoldierjack.cn/ Vidar-Team | PWN Cosmos https://cosmos.red/ Vidar-Team | PWN | Go | 高并发 Kevin https://harmless.blue/ Vidar-Team | Web | 美术 | Node","link":"/blogrol/index.html"},{"title":"关于我","text":"本科就读于杭州电子科技大学。 Vidar-Team 2018 成员，主攻 Web / Misc。 有的时候也玩玩别的。 博客维护日志（保留近12条） 2022.6 升级 hexo 版本至 6.2.0 升级主题版本至 5.0.0-rc 友链页面 URL 统一显示为蓝色 移除板块“阅读与摘抄” 2021.12 更新插件，和弃用 hexo-tag-htmltag 增加 hexo-tag-mmedia 及 hexo-tag-niconico 去除博客固定链接中的日期 去除“最近更新”显示，文章修改时间以“发布时间”为准 升级主题版本至 4.5.0 2021.11 将博客转移至阿里云 OSS 2021.10 更新友链页面（头像） 增加和维护副站 升级主题版本至 4.4.0 修改博客标题和镜像站链接 维护首页个人资料 弃用 docker，更换为 Aliyun Cloud OS + Podman 2021.5 将“高中培训资料”与 Wiki 合并 重排导航栏按钮顺序，增加固定链接 2021.4 移除了 hexo-uuid 插件 增加了 hexo-admin 插件，有 bug 所以很少用 升级插件版本 将图片由 asset 替换为 Markdown 默认语法，更好的结合了编辑器 可使用 Typora 直接插入图片了 2021.3 优化友链页面 Wiki 迁移 修正上标问题 2021.2 兼容问题，移除了 hexo-ruby-character 插件 升级 Hexo 版本至 5.4.0 升级主题版本至 4.1.2 升级 Hexo 插件","link":"/about/index.html"},{"title":"","text":"欢迎访问 Coding Box 个人知识库您好，欢迎访问 CodingBox 个人知识库。本 Wiki 主要收录本人所遇见的、需要摘抄记录或留作备忘的技巧、方法、概念等内容。范围宽泛但远不够系统和深入。同时，本 Wiki 中的部分内容可能存在疏漏或错误。若您发现任何错误，或者有任何新的想法想进行指导，欢迎在 Wiki 内容页预留的讨论页内留言，我将感激不尽。 知识库目录 学校学科：指关于学校内的必修课、专业课和选修课的记录。 自然语言：指日常生活中沟通交流所使用的自然语言。 网络安全：指网络安全竞赛（夺旗赛CTF等）、网络安全技术、网络安全行业等。 编程语言：指程序开发时所用到的各类程序语言。此模块会记录一些语言的语法、例程、技巧及开发注意事项等。 数学与（计算）科学：指算法、额外的数学知识、额外的信息理论知识等。 游戏开发：指游戏程序开发、游戏引擎、游戏玩法分类与设计、游戏剧情策划、游戏数值策划等。 设计：指平面设计、UI设计、UX设计、字体设计、网页设计、人物设计、服装设计等。 绘画：指绘画理论、线稿修饰、透视上色、数字绘景、3D辅助作画、厚涂半厚涂及赛璐璐风格剖析等。 舞台技术：指现场拾音调音、打光（调光）、导播、直播、舞台弹幕互动等。 音乐与音频：指乐理、声音理论、效果器、合成器、修音、后期处理、母带、电音分类与制作等。 传媒：指影视剪辑、影视特效、人像处理、广告包装、营销、色彩修正、视频压制、视频字幕等。 技术美术：指DCC（与的上述分类重复的除外）、三维技术、渲染技术、特效（与上述分类重复的除外）、计算机图形学（上述分类重复的除外）等。 流媒体技术：指音视频直播技术、流媒体编解码技术等。 人工智能与机器学习：指人工智能理论、机器学习理论、神经网络分类、人工智能框架、人工智能开发、人工智能法律等。 区块链：指区块链理论、加密货币、智能合约、区块链存储、区块链开发等。 文学与考证：指书摘、书评、世界观描述、科幻体系架构、神秘学、宗教文化等。 百科：指零散的、不成知识体系的“百科全书”式的词条。这里的词条位置可能会经常发生变动——或是被归类至其他分类，或是被合并至其他词条。 特殊分区 SYTV培训资料","link":"/wiki/index.html"},{"title":"SYTV 培训资料","text":"转存和更新本人在大庆实验中学电视台（SYTV）期间所收藏过的资料以供借鉴和查阅。限于当时与转存时阅历所限，总结中或许存在诸多问题，请谅解，同时欢迎您在评论区指正。 由于目标群体是高中学生，没有大量的时间与经历学习课外内容；同时资料的原始目的在于培训，因此不会涉及复杂的知识和理论，除非必要。 链接Python","link":"/wiki/SYTV%E5%9F%B9%E8%AE%AD%E8%B5%84%E6%96%99/index.html"},{"title":"","text":"学校学科线性代数 信息论与编码_1","link":"/wiki/%E5%AD%A6%E6%A0%A1%E5%AD%A6%E7%A7%91/index.html"},{"title":"","text":"百科名词注解 费控 第X国际 X to Y","link":"/wiki/%E7%99%BE%E7%A7%91/index.html"},{"title":"","text":"自然语言汉语（中文） 日语 法语 英语","link":"/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/index.html"},{"title":"","text":"音乐与音频效果器EQ调节误区","link":"/wiki/%E9%9F%B3%E4%B9%90%E4%B8%8E%E9%9F%B3%E9%A2%91/index.html"},{"title":"Python","text":"Python是当今应用极为广泛的编程语言之一。其语法简单多样、易于编写，内置库丰富、编写库简单，且可联网下载函数库（如Pypi）等等等特性使其在发布之初便一鸣惊人。下面提供一些有用的资料，方便初学者了解和学习。 注意：Python2和Python3在编程语法上存在较大差异。鉴于Python2的维护将于2020年结束，建议放弃Python2（或只做简单了解）后直接学习Python3。 环境配置https://www.python.org/downloads/ 推荐使用Conda环境：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ 语言入门https://www.runoob.com/python3/python3-tutorial.html https://www.runoob.com/python/python-tutorial.html https://www.liaoxuefeng.com/wiki/1016959663602400 英语还不错？可以挑战一下官方英语文档：https://wiki.python.org/moin/BeginnersGuide 速成？参见：https://learnxinyminutes.com/docs/zh-cn/python3-cn/ 完整的文档？参见：https://docs.python.org/3/ IDEhttps://www.jetbrains.com/pycharm/ 可以利用编辑器(VSCode/SublimeText)+命令行替代IDE Jupyter Notebook也是个不错的选择。 源https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/ https://mirrors.tuna.tsinghua.edu.cn/help/pypi/ 常用库（无顺序）12numpy pandas typing sys os thread multiprocessing socket asyncioscipy tensorflow pytorch vapoursynth pip django flask 仅为举例，请依照需求确定学习和使用什么库。 小技巧与语法糖 https://github.com/leisurelicht/wtfpython-cn 也包括一些写代码时的易错点。注意不要过度使用语法糖。","link":"/wiki/SYTV%E5%9F%B9%E8%AE%AD%E8%B5%84%E6%96%99/Python/index.html"},{"title":"","text":"信息论与编码 Part.1","link":"/wiki/%E5%AD%A6%E6%A0%A1%E5%AD%A6%E7%A7%91/%E4%BF%A1%E6%81%AF%E8%AE%BA%E4%B8%8E%E7%BC%96%E7%A0%81_1/index.html"},{"title":"","text":"线性代数线性代数是数学的其中一个分支。主要研究向量、向量空间（线性空间）、线性变换及有限维度的线性方程组。1 线性指的是线性关系，即两个或多个变量（数学元素）间的关系程一次形式。例如：n元一次方程组、形如 $f(x+y) = f(x) + f(y)$ 的函数关系等。代数 指的是用符号代替具体数值进行计算，化具体为抽象。 本提纲基于教材《工程数学线性代数（第六版）》（同济大学数学系），采用其表述及顺序。 行列式用通用的方法表示二元一次方程组： $$ \\{ \\begin{matrix} a_{11} x_1 + a_{12} x_2 = b_1, \\\\ a_{21} x_1 + a_{22} x_2 = b_2. \\end{matrix} $$ 提取未知数前的系数，按顺序可以组成数表： $$ \\begin{matrix} a_{11} \\ a_{12} \\\\ a_{21} \\ a_{22} \\end{matrix} $$ 用 | | 包裹数表，表达行列式： $$ \\begin{vmatrix} \\color{red}{a_{11}} \\ \\color{blue}{a_{12}} \\\\ \\color{blue}{a_{21}} \\ \\color{red}{a_{22}} \\end{vmatrix} $$ 上式中红色的两个元素所在的线（从左上角到右下角）称为 主对角线，蓝色的两个元素所在的线（从右上角到左下角）称为 副对角线。 1.线性代数（数学分支学科）_百度百科↩","link":"/wiki/%E5%AD%A6%E6%A0%A1%E5%AD%A6%E7%A7%91/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/index.html"},{"title":"","text":"汉语（中文）语流音变在语流中，由于受到相邻音节的相邻音素的影响，一些音节中的声母、韵母或声调会发生语音的变化，我们称之为语流音变。1 “音变”，指的是声音发生了变化。“语流”，人在说话的时候并非发出一个个单独的字音，而是由字成词、连词成句。 1.https://baike.baidu.com/item/%E8%AF%AD%E6%B5%81%E9%9F%B3%E5%8F%98/5667409↩","link":"/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/%E6%B1%89%E8%AF%AD%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/index.html"},{"title":"","text":"日语日语，是日本的官方语言。近些年来由于日本二次元文化的兴起与传入，日语在青年人的日常生活中逐渐变得常见。日语分支与方言众多1 。比较有名的如 大阪话（关西方言）、北海道方言、博多方言 等。 1.http://m.fx361.com/news/2017/0906/2229969.html↩","link":"/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/%E6%97%A5%E8%AF%AD/index.html"},{"title":"","text":"法语","link":"/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/%E6%B3%95%E8%AF%AD/index.html"},{"title":"","text":"英语缩略语 w.r.t：也写作WRT或w/r/t或r/t，表示“至于说…”、“关于…”、“对…来说”。 例一：WRT the docs, there's an issue. 至于那些文档，其中有个问题。 例二：Code is where the &quot;rubber meets the road&quot; w/r/t performance. 代码是关系到性能“有所偏差”的地方。","link":"/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/%E8%8B%B1%E8%AF%AD/index.html"},{"title":"","text":"X to Y常见的缩写： 2：“to”，谐音 G：“Government”，政府 E：“Employee”，职工/雇员 C：“Costumer”，消费者 B：“Business”，商业/公司 举例说明： B2C：Business to Costumer，即公司给消费者提供服务。公司生产产品供消费者购买使用属于此类。 B2B：Business to Business，即公司给公司提供服务。原材料公司将产品进行粗加工后提供给其他公司做精细加工属于此类。 B2G：Business to Government，即公司给政府提供服务。云计算公司给政府提供云计算基础设施属于此类。","link":"/wiki/%E7%99%BE%E7%A7%91/%E5%90%8D%E8%AF%8D%E6%B3%A8%E8%A7%A3/X_to_Y/index.html"},{"title":"","text":"费控“成本费用控制”的简称，是指企业在生产经营过程中，按照既定的成本费用目标，对构成成本费用的诸要素进行的规划、限制和调节，及时纠正偏差，控制成本费用超支，把实际耗费控制在成本费用计划范围内1。 1.成本费用控制_百度百科↩","link":"/wiki/%E7%99%BE%E7%A7%91/%E5%90%8D%E8%AF%8D%E6%B3%A8%E8%A7%A3/%E8%B4%B9%E6%8E%A7/index.html"},{"title":"","text":"第X国际 考研笔记，做区分用 历史上存在第一国际、第二国际、第三国际、第二半国际、第四国际、第五国际这六种提法。 第一国际：又称“国际工人联合会”，由马克思领导，于1864年成立，于1876年解散。历史意义集中在思想的宣传和发展方面。巴黎公社运动由第一国际的法国支部参加和领导。1 第二国际：又称“社会主义国际”，由恩格斯领导，于1889年成立，于1914年解散，活跃于第一次世界大战前夕。其中1895年恩格斯逝世后，机会主义开始泛滥，因此1896年第二国际修正主义开始形成。2 3 第三国际：又称“共产国际”，由布尔什维克领导，于1919年成立，于1943年解散。中国于1922年加入第三国际，于1940年中断联系。4 第二半国际：又称“维也纳国际”，于1921年成立，于1923年与伯尔尼国际合并为社会主义工人国际。5 第四国际：又称“世界社会主义革命党”，由托洛茨基领导，于1938年成立，活跃至今。活跃期间组织发生多次分裂。6 第五国际：并不是单一的组织，而是泛指第四国际后部分社会主义和无产阶级尝试创建新的国际联盟的努力。“争取第五国际联盟”于1990年改为现用名称，现已解散并合并入英国工党。7 8 1.第一国际 - 百度百科↩2.第二国际 - 百度百科↩3.第二国际修正主义 - 百度百科 ↩4.第三国际 - 百度百科 ↩5.第二半国际 - 百度百科↩6.第四国际 - 百度百科↩7.第五国际 - 百度百科↩8.争取第五国际联盟 - 维基百科，自由的百科全书↩","link":"/wiki/%E7%99%BE%E7%A7%91/%E5%90%8D%E8%AF%8D%E6%B3%A8%E8%A7%A3/%E7%AC%ACX%E5%9B%BD%E9%99%85/index.html"},{"title":"","text":"EQ调节误区 来源：BV1yA411H7id “EQ调节范围应小于3db或者6db”：不正确。应该依照素材的特性，确定EQ的调节范围。 “EQ应该多做减法（降低声音响度）少做加法（提升声音响度）”：不正确。加法和减法没有必然的使用要求，多数情况下加法合成器更加符合工作流程。 过度扫频：错误。任何过度使用EQ的操作都是错误的，淹没声音特点，而且会习惯性的使用不必要的EQ。-&gt; 只在需要进行EQ处理的时候使用EQ 做EQ时尽量不要Solo，注意“上下文”。","link":"/wiki/%E9%9F%B3%E4%B9%90%E4%B8%8E%E9%9F%B3%E9%A2%91/%E6%95%88%E6%9E%9C%E5%99%A8/EQ%E8%B0%83%E8%8A%82%E8%AF%AF%E5%8C%BA/index.html"}]}